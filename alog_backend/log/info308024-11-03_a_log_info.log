2024-11-03T00:02:07.064+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:02:07.080+0800	INFO	service/article.go:135	req_id:008ed0d8-5562-447c-a035-8f3b3653f70a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:02:12.735+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:02:12.735+0800	INFO	service/article.go:135	req_id:bcde9d94-9f2a-4839-85ac-f56fd1b2b10e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:02:24.340+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:02:24.341+0800	INFO	service/article.go:135	req_id:caafb504-3dc3-4ba8-b0de-80a7f28ce9e1|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:02:35.082+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:02:35.082+0800	INFO	service/article.go:135	req_id:6a61e58c-1249-4d32-873c-9eed5ece2b8b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:02:48.389+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:02:48.390+0800	INFO	service/article.go:135	req_id:adaa4b86-db4b-4e49-a1c1-fc1793f114fa|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:02:54.373+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:02:54.373+0800	INFO	service/article.go:135	req_id:4274c95a-ac0d-4226-9a07-d0bef4533577|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:02:59.159+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:02:59.160+0800	INFO	service/article.go:135	req_id:4c0918ed-9455-453b-8dfa-c1409ed91082|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:03:36.064+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:03:36.064+0800	INFO	service/article.go:135	req_id:555bb846-6e97-4f8d-be57-b7eaad3da9d4|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:03:48.975+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:03:48.975+0800	INFO	service/article.go:135	req_id:7765a050-9198-4e41-bb6a-bc9be9a43596|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:03:50.253+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:03:50.254+0800	INFO	service/article.go:135	req_id:e4779ebf-c0d7-4829-9975-90c7eee5b4e3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:04:39.689+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:04:39.689+0800	INFO	service/article.go:135	req_id:d37bf710-e5a0-4d6f-8bbf-7e31954414e1|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:05:47.196+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:05:47.196+0800	INFO	service/article.go:135	req_id:afd45138-a4c0-466a-ae79-d9a75b26ee07|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:07:15.738+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:07:15.738+0800	INFO	service/article.go:135	req_id:7db9f9df-57c3-431d-a375-ad677bd06cec|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:07:22.668+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:07:22.669+0800	INFO	service/article.go:135	req_id:124a5c56-c2ae-49c7-880a-598c0541bf3f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:07:41.752+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:07:41.753+0800	INFO	service/article.go:135	req_id:4cfe7f31-2bed-4b03-9a1f-aba793caaab0|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:07:49.621+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:07:49.628+0800	INFO	service/article.go:135	req_id:b0d1ad73-0b0b-493e-bfb9-59d34256b3b7|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:07:59.268+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:07:59.268+0800	INFO	service/article.go:135	req_id:a8cec1c3-ac38-4e84-9ebc-625b3f9dce0a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:08:09.829+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:08:09.829+0800	INFO	service/article.go:135	req_id:f757b640-35ba-43b4-bd13-6c1a91bdb19e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:08:15.682+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:08:15.683+0800	INFO	service/article.go:135	req_id:b2d6feaf-0436-48ee-9878-9cd8dfa0bbc8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:08:23.646+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:08:23.647+0800	INFO	service/article.go:135	req_id:b61ee489-c653-4af1-bb4c-58208990a918|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:08:40.361+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:08:40.361+0800	INFO	service/article.go:135	req_id:94014736-8051-414d-8871-7d5518ec5036|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:08:51.535+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:08:51.535+0800	INFO	service/article.go:135	req_id:739d0c3a-177e-4b5b-86bc-06d73c570f20|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:09:15.877+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:09:15.878+0800	INFO	service/article.go:135	req_id:b09ca387-71e4-4490-8b32-22d52ed27934|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:10:01.158+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:10:01.159+0800	INFO	service/article.go:135	req_id:66ad5663-a8f3-4e9e-ba83-ff761aadef91|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:10:11.075+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:10:11.075+0800	INFO	service/article.go:135	req_id:a33af82b-dce8-401d-9585-acef488559aa|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:10:19.011+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:10:19.011+0800	INFO	service/article.go:135	req_id:24cbc882-c07e-434a-9ccc-09c287287c99|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:10:54.955+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:10:54.956+0800	INFO	service/article.go:135	req_id:2ae3c5e9-d1b5-4257-8069-bce357dcc278|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:10:58.549+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:10:58.549+0800	INFO	service/article.go:135	req_id:d96d247d-a453-4a1b-a4f1-28a57f1cc4ed|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:12:34.966+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:12:34.966+0800	INFO	service/article.go:135	req_id:df2d7a9b-bf22-4088-ac38-de2c54442ba4|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:12:48.249+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:12:48.250+0800	INFO	service/article.go:135	req_id:639e1270-7e85-42fd-b925-0cbd1be87f09|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:12:51.980+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:12:51.980+0800	INFO	service/article.go:135	req_id:02978c8a-6726-458d-ba0a-8dcb9d7d0dea|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:13:38.547+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:13:38.548+0800	INFO	service/article.go:135	req_id:724a7028-e398-4d7b-8a48-96b9e8ec64ba|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:13:52.092+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:13:52.092+0800	INFO	service/article.go:135	req_id:7e050658-a50c-437e-b598-2010ffc74354|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:13:56.147+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:13:56.147+0800	INFO	service/article.go:135	req_id:b274e0fe-9ee6-4f53-a265-11ba001f8eb1|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:14:14.100+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:14:14.106+0800	INFO	service/article.go:135	req_id:5e4095c5-10d6-46d4-91b4-40c4f786d96a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:14:25.045+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:14:25.046+0800	INFO	service/article.go:135	req_id:85a18c7e-3516-4858-b4c3-25e48fe025ad|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:14:43.891+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:14:43.891+0800	INFO	service/article.go:135	req_id:d592444e-c4cb-483a-876f-aca724bb45cd|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:15:03.205+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:15:03.205+0800	INFO	service/article.go:135	req_id:febd3d59-c013-4714-8a11-436c6026781d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:15:25.918+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:15:25.918+0800	INFO	service/article.go:135	req_id:567c1ea7-ad25-44d9-95d4-a93eacb6357f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:15:47.888+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:15:47.888+0800	INFO	service/article.go:135	req_id:c6516d19-b54a-43d6-94c4-632609388f8d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:16:15.493+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:16:15.493+0800	INFO	service/article.go:135	req_id:3fff0a5c-799f-430f-9b10-c7a95ae0ec6d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:16:37.331+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:16:37.331+0800	INFO	service/article.go:135	req_id:eb1d9467-d884-4afc-bd54-c6fd5ed963ce|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:16:38.377+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:16:38.377+0800	INFO	service/article.go:135	req_id:3a1b8fdf-166d-44a4-bf2c-df1cb7fdd1e0|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:17:31.992+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:17:31.992+0800	INFO	service/article.go:135	req_id:31c2eb22-24b8-46cb-82d9-cfe08546e529|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:17:46.392+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:17:46.392+0800	INFO	service/article.go:135	req_id:13eff6bb-cebd-4c84-9e5d-873ad5dc1a40|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:18:08.421+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:18:08.421+0800	INFO	service/article.go:135	req_id:10279fdc-b503-47ee-889a-f197ca8b1bc3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:19:04.241+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:19:04.241+0800	INFO	service/article.go:135	req_id:febff037-2ed5-4809-ae2d-260499e25d7f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:19:05.456+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T00:19:05.604+0800	INFO	service/article.go:47	req_id:e889cd97-3a9c-4858-8ccb-e97407138130|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:11 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T00:19:10.126+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:19:10.126+0800	INFO	service/article.go:135	req_id:48b2eb86-b8d5-4b95-8176-a4f7b38d62d5|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:19:11.635+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:19:11.636+0800	INFO	service/article.go:135	req_id:6e14eb23-4311-4dbb-a498-0fcc86753779|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:19:13.148+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:19:13.292+0800	INFO	service/article.go:47	req_id:7ab35285-8925-4440-a2e4-3cf7391ff1ce|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:12 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:19:46.984+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:19:47.119+0800	INFO	service/article.go:47	req_id:f8bb7004-f93f-47ff-8ffe-22a4797e155a|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:13 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:20:15.477+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:20:15.609+0800	INFO	service/article.go:47	req_id:3cdf99da-dc1e-4ee8-b40c-e4b34e4848ad|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:14 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:20:23.234+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:20:23.340+0800	INFO	service/article.go:47	req_id:ab0b4d52-5ef2-4204-8c5c-d55632fa9643|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:15 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:20:31.948+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:20:32.081+0800	INFO	service/article.go:47	req_id:4c99abbe-7616-4970-b354-212f3b7eba15|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:16 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:20:50.698+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:20:50.810+0800	INFO	service/article.go:47	req_id:3c1ba044-a6c6-42e3-8540-cbb83be6bd85|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:17 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:21:08.772+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:21:08.907+0800	INFO	service/article.go:47	req_id:3cf5306f-847e-42d5-9b14-519a7cd483e5|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:18 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:21:22.342+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:21:22.473+0800	INFO	service/article.go:47	req_id:73412f8e-627e-4e9f-b3e4-184997352d09|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:19 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:21:48.958+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:21:49.070+0800	INFO	service/article.go:47	req_id:94ea2000-40bd-4939-8f3b-c1fe6c057b06|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:20 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:21:57.193+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:21:57.310+0800	INFO	service/article.go:47	req_id:1d3ce0a4-03c4-4aa1-a3f4-3d7356449a1a|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:21 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:22:56.346+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:22:56.563+0800	INFO	service/article.go:47	req_id:21d19987-fdc1-4461-9cb5-863bb9ea32db|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:22 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:22:57.632+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:22:57.755+0800	INFO	service/article.go:47	req_id:d352185e-a825-4726-8d17-7fc173c2a89f|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:23 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:23:25.273+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:23:25.408+0800	INFO	service/article.go:47	req_id:e82f0aa2-f0f8-4a30-8e9e-221f25eaafc8|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:24 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:23:31.090+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:23:31.216+0800	INFO	service/article.go:47	req_id:74bd256c-8351-4e73-a053-7c15128ee97d|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:25 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:23:48.515+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:23:48.633+0800	INFO	service/article.go:47	req_id:e79c6c14-0c4f-4e1b-90e9-9d3a424eba98|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:26 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:23:58.065+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:23:58.191+0800	INFO	service/article.go:47	req_id:dd730188-a883-4a43-af56-ac612f077489|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:27 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:24:06.436+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:24:06.437+0800	INFO	service/article.go:135	req_id:ac1cae2a-642d-4002-acd7-e1bd4a045cee|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:24:19.992+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T00:24:20.124+0800	INFO	service/article.go:47	req_id:9c80f8d5-4131-4574-b77e-ac60ed5c3a2a|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:12 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T00:24:25.602+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T00:24:25.716+0800	INFO	service/article.go:47	req_id:74b9b376-bf2e-4580-a86e-dd59a3cf63a0|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:13 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T00:24:32.649+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:24:32.649+0800	INFO	service/article.go:135	req_id:309925e4-97d3-44cd-8dce-98b42ce41a57|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:24:34.934+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:24:34.935+0800	INFO	service/article.go:135	req_id:742306f1-78bb-463b-b1c3-e8cd4aa8262c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:25:08.535+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:25:08.535+0800	INFO	service/article.go:135	req_id:16d858e3-1dd1-40c8-a749-04b5b87d69ab|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:25:25.033+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:25:25.034+0800	INFO	service/article.go:135	req_id:7c9b8863-e985-4e84-8e16-a8f44315e3af|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:25:42.003+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:25:42.003+0800	INFO	service/article.go:135	req_id:5e8bc9ad-1bda-4841-856c-fe30260fcb0d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:26:46.177+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:26:46.177+0800	INFO	service/article.go:135	req_id:5d0ffa57-09e0-481e-905f-3ab868bfb1d5|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:26:48.546+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:26:48.546+0800	INFO	service/article.go:135	req_id:f39dccd6-5a39-452b-b69f-e5428763f81a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:26:53.355+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:26:53.355+0800	INFO	service/article.go:135	req_id:74735893-53c2-49e3-a214-1e66a8fb1830|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:29:09.437+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:29:09.438+0800	INFO	service/article.go:135	req_id:4c6312b0-96d3-42ff-ba2d-f3d47076adba|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:30:15.249+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:30:15.250+0800	INFO	service/article.go:135	req_id:f40c32ce-8ad6-43d2-85e1-dab6c54d33c3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:30:23.129+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:30:23.130+0800	INFO	service/article.go:135	req_id:d7a43bc7-2ffe-4ca4-af39-edc3d56d4bfa|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:30:59.189+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:30:59.190+0800	INFO	service/article.go:135	req_id:ac9255ed-4e8b-4dc0-8b5f-8dae325fd0db|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:31:05.785+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:31:05.786+0800	INFO	service/article.go:135	req_id:e2b23fea-0bc8-4e6d-84a3-56091403f168|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:32:22.591+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:32:22.591+0800	INFO	service/article.go:135	req_id:76b1e106-913b-4867-a502-37e0df50f620|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:32:27.671+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:32:27.671+0800	INFO	service/article.go:135	req_id:2fdf3443-75ef-49b2-88ba-ba1e93b7f8e9|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:32:45.823+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:32:45.824+0800	INFO	service/article.go:135	req_id:b1f612c7-4e0e-4d0f-994a-db5bb0bb4ecd|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:33:24.821+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:33:24.822+0800	INFO	service/article.go:135	req_id:d8c96a00-4a4b-4dd1-820b-f71257acef56|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:33:31.225+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:33:31.225+0800	INFO	service/article.go:135	req_id:54e143aa-881a-41ef-9d02-b68311400ec4|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:34:05.241+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:34:05.241+0800	INFO	service/article.go:135	req_id:9acfe906-4be5-4341-b0c7-88b082bfce69|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:34:58.912+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:34:58.914+0800	INFO	service/article.go:135	req_id:cc31196e-ee08-49ab-ab7a-ba92289b0357|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:35:03.315+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T00:35:03.439+0800	INFO	service/article.go:47	req_id:ef156af5-6164-4564-83e1-a62a20b334f1|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:14 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T00:35:42.265+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T00:35:42.384+0800	INFO	service/article.go:47	req_id:a3743def-2d59-402e-bf3c-0e85f2ab8617|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:15 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T00:35:46.212+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T00:35:46.338+0800	INFO	service/article.go:47	req_id:f28b63e1-b726-42c6-af8b-be9d013216e6|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:16 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T00:35:48.531+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:35:48.531+0800	INFO	service/article.go:135	req_id:36a6dc18-360a-49bd-b0a7-536cf8df0853|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:35:50.083+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T00:35:50.211+0800	INFO	service/article.go:47	req_id:b25375f8-b618-4738-acb5-3776a13abd0c|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:3 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T00:37:41.478+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T00:37:41.592+0800	INFO	service/article.go:47	req_id:4272c48e-b031-4c8d-a768-4149f9c6db13|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:4 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T00:38:03.070+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T00:38:03.183+0800	INFO	service/article.go:47	req_id:63b89982-0950-4a31-962d-7ff9e489e528|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:5 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T00:38:10.322+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T00:38:10.433+0800	INFO	service/article.go:47	req_id:ca2893de-d596-4fe2-9b58-1fc3dd15801f|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:6 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T00:38:14.257+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T00:38:14.377+0800	INFO	service/article.go:47	req_id:bb0d2301-1460-4006-b30c-95ba050ed894|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:7 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T00:38:20.277+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T00:38:20.411+0800	INFO	service/article.go:47	req_id:d5906ba0-8cd8-432f-aaf4-2bc7955a1437|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:8 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T00:38:25.600+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T00:38:25.738+0800	INFO	service/article.go:47	req_id:6c27ed46-466d-444d-871c-9fc2860c56b1|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:9 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T00:38:38.670+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T00:38:38.793+0800	INFO	service/article.go:47	req_id:542743ab-8423-4d3f-8eaa-79ba343c988e|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:10 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T00:38:50.641+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T00:38:50.759+0800	INFO	service/article.go:47	req_id:2ef4a880-df36-4079-a72c-28f26a9b1478|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:11 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T00:38:53.202+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:38:53.203+0800	INFO	service/article.go:135	req_id:c84c77b6-1cf8-422c-8187-322f604a07e1|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:38:59.576+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:38:59.577+0800	INFO	service/article.go:135	req_id:2256630e-885a-4e1c-9080-e4d545fc5566|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:39:03.386+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:39:03.387+0800	INFO	service/article.go:135	req_id:c6b31d89-734d-414a-92e6-21d1fd194865|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:39:08.227+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T00:39:08.344+0800	INFO	service/article.go:47	req_id:2ac4db94-acfc-48b1-933a-ce0b258d586c|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:17 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T00:39:09.826+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T00:39:09.826+0800	INFO	service/article.go:135	req_id:eb58f9af-e26c-4b7a-8b29-dbfb7bcbd7eb|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T00:39:18.308+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T00:39:18.309+0800	INFO	service/article.go:135	req_id:4f4f81c2-3f44-43d3-9f6d-0dfd07f81996|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T00:39:32.349+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:39:32.491+0800	INFO	service/article.go:47	req_id:144e6a07-14db-4705-91b8-32c17d3b9c71|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:28 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T00:41:46.514+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T00:41:46.727+0800	INFO	service/article.go:47	req_id:bfef3a15-0d24-4953-ad39-747f828e7a03|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:29 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T11:36:28.193+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:36:28.195+0800	INFO	service/article.go:135	req_id:7f1df611-22b5-4a89-8250-514b6a7b309c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:37:44.156+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:37:44.158+0800	INFO	service/article.go:135	req_id:f3fbc0fa-81a7-4bb6-9b3e-d20fc58004f8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:37:52.624+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T11:37:52.774+0800	INFO	service/article.go:47	req_id:4915cbc6-87a8-4c5a-ab59-3bec99ed2391|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:12 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T11:37:57.423+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:37:57.424+0800	INFO	service/article.go:135	req_id:31e016a9-d285-4736-9450-fe49617d1442|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:38:40.528+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:38:40.529+0800	INFO	service/article.go:135	req_id:4bb4c7d3-4f51-43e9-9433-7466baba3b5b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:39:02.217+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:39:02.217+0800	INFO	service/article.go:135	req_id:8d1954a4-5ce9-45f2-b13e-82d99e30401e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:39:39.638+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:39:39.638+0800	INFO	service/article.go:135	req_id:778bab50-f371-4f4e-8fe2-9d3154497c1e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:40:17.482+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:40:17.483+0800	INFO	service/article.go:135	req_id:7df34429-a573-4760-a549-843d468b7ae2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:40:32.716+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:40:32.716+0800	INFO	service/article.go:135	req_id:789617da-0ba9-4f87-895e-51c9c1022167|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:41:01.327+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:41:01.328+0800	INFO	service/article.go:135	req_id:9ef101c3-61de-4878-af85-0299f211ce14|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:43:35.738+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:43:35.738+0800	INFO	service/article.go:135	req_id:d22289cd-e927-4717-aa80-cc682ee1c3e1|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:44:11.574+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:44:11.574+0800	INFO	service/article.go:135	req_id:7c43c51a-50a3-458d-9d3c-e491b3222589|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:45:10.729+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:45:10.730+0800	INFO	service/article.go:135	req_id:3d75c1e1-9d86-4c77-b961-0df7b999f609|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:45:26.829+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:45:26.830+0800	INFO	service/article.go:135	req_id:1dd71b59-758f-4282-aefb-27f7641e56c0|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:45:35.120+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:45:35.121+0800	INFO	service/article.go:135	req_id:b3150c5c-417c-4231-ae07-45135a2a5c94|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:46:02.891+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:46:02.891+0800	INFO	service/article.go:135	req_id:64ea58b2-baa8-4262-9549-914a6bd668f8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:46:18.714+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:46:18.715+0800	INFO	service/article.go:135	req_id:9660809e-f0f9-4d84-a21d-b31bd2d12582|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:49:08.381+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:49:08.381+0800	INFO	service/article.go:135	req_id:cc9d329f-58b6-4c67-851c-54894e810bb7|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:49:51.842+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:49:51.842+0800	INFO	service/article.go:135	req_id:27a5f9d7-ebac-4cb0-98bf-94fd6b47924c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:50:08.086+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:50:08.087+0800	INFO	service/article.go:135	req_id:3377dddf-24fa-43c7-90d9-7ce8d00d69fa|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:50:13.219+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:50:13.219+0800	INFO	service/article.go:135	req_id:2b527779-0618-4f2f-bc33-b7d0768034e3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:50:25.789+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:50:25.789+0800	INFO	service/article.go:135	req_id:8be1234e-971f-4d14-b119-b8c5ecc199a2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:50:45.121+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:50:45.124+0800	INFO	service/article.go:135	req_id:351d8051-5c58-4f06-8e72-784462ba7d2f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:50:48.366+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:50:48.366+0800	INFO	service/article.go:135	req_id:25b533ea-9eca-43c1-bba6-6da30ec3cb95|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:51:09.230+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:51:09.230+0800	INFO	service/article.go:135	req_id:543304cc-dc87-4d67-b68f-d33c66a577b3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:51:35.138+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:51:35.138+0800	INFO	service/article.go:135	req_id:92f20ba0-8703-4e28-be99-618e7eacdd75|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:52:00.786+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:52:00.786+0800	INFO	service/article.go:135	req_id:9d8ed79e-cc0d-4715-b315-d01148177852|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:52:26.824+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:52:26.824+0800	INFO	service/article.go:135	req_id:ca5a774c-d68b-4a19-bd1c-83e42d05aa96|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:52:35.964+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:52:35.966+0800	INFO	service/article.go:135	req_id:d7202b41-d530-46eb-bf8c-624fa7e6766c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:52:54.095+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:52:54.099+0800	INFO	service/article.go:135	req_id:027ec00c-d146-4367-939b-83122bebcb35|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:53:00.232+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:53:00.232+0800	INFO	service/article.go:135	req_id:7e4b5260-d654-47d1-a5b8-1192914fdf80|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:53:05.512+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:53:05.513+0800	INFO	service/article.go:135	req_id:e39968c4-2b82-4af7-928e-0d9e1a2e5a64|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:53:13.789+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:53:13.790+0800	INFO	service/article.go:135	req_id:e29fd4df-a3f5-48eb-b9f4-51328281da3f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:53:23.419+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T11:53:23.535+0800	INFO	service/article.go:47	req_id:46e20833-8153-4176-88ab-338924a037c7|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:18 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T11:53:26.236+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:53:26.236+0800	INFO	service/article.go:135	req_id:746c8f88-c0aa-4dcf-be06-c02f4651fa09|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:53:52.309+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:53:52.309+0800	INFO	service/article.go:135	req_id:a1463cbc-ca96-426d-94bb-6c9ae8afee9a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:54:22.698+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:54:22.699+0800	INFO	service/article.go:135	req_id:97ee3259-c54a-4305-8fa0-5b427396beac|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:54:37.272+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:54:37.273+0800	INFO	service/article.go:135	req_id:048302c9-d56b-4f00-bb57-9d0d43a36e21|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:55:04.627+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:55:04.629+0800	INFO	service/article.go:135	req_id:069f9cf2-5e45-4a01-8fab-983b4ae94c1d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:55:25.362+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:55:25.363+0800	INFO	service/article.go:135	req_id:84648cb0-f451-4dcb-9cfb-b2025ff48068|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:55:29.794+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:55:29.795+0800	INFO	service/article.go:135	req_id:39e41343-f1e0-40ef-b30f-877137625439|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:55:48.246+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:55:48.246+0800	INFO	service/article.go:135	req_id:279f5da3-107c-40a5-be55-7627dd03f16b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:56:02.540+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:56:02.541+0800	INFO	service/article.go:135	req_id:bf4f181e-f7b4-460d-9151-cedf6ae1118b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:56:09.015+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T11:56:09.016+0800	INFO	service/article.go:135	req_id:a5dc304e-dd0e-4a87-872f-e7210c999824|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T11:56:38.881+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:56:38.882+0800	INFO	service/article.go:135	req_id:1c4f4b7c-b847-48ba-a1ae-c60b733477e5|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:56:51.685+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:56:51.686+0800	INFO	service/article.go:135	req_id:6c6c5f03-f655-4e2d-ac7e-925c7f399409|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:56:59.094+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T11:56:59.235+0800	INFO	service/article.go:47	req_id:02bf37fb-b875-46e2-a860-ea7e469c6b77|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:19 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T11:57:03.709+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:57:03.711+0800	INFO	service/article.go:135	req_id:e15e96ca-004f-4e09-b6d5-4e9f9a418be8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:57:05.887+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T11:57:05.889+0800	INFO	service/article.go:135	req_id:1b068113-951a-4f39-97c8-5698248e6b71|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T11:57:07.946+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T11:57:08.079+0800	INFO	service/article.go:47	req_id:eee0b74f-31e5-4884-9a74-74eb3990fa81|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:30 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T11:57:28.242+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:57:28.243+0800	INFO	service/article.go:135	req_id:118a798b-7053-4a6d-9d3f-5c6e2ee225ad|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:57:57.842+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T11:57:57.843+0800	INFO	service/article.go:135	req_id:3b949784-19df-4d4d-8bc3-97828603cca2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T11:58:09.089+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:58:09.091+0800	INFO	service/article.go:135	req_id:4289ee7d-b6e7-4d7a-8908-bbf683857ca3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:58:23.684+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T11:58:23.812+0800	INFO	service/article.go:47	req_id:eba58894-cf18-439c-820f-1b0de055fd8f|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:20 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T11:58:32.624+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:58:32.624+0800	INFO	service/article.go:135	req_id:2461fbf8-38f1-40b5-a83d-26d6804a0837|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:59:12.122+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:59:12.127+0800	INFO	service/article.go:135	req_id:64160ec3-601d-4dff-9988-52cbcebc57a9|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:59:37.934+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:59:37.935+0800	INFO	service/article.go:135	req_id:b267d3d1-3889-4a62-8a13-152c50cb488e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T11:59:44.541+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T11:59:44.542+0800	INFO	service/article.go:135	req_id:aa25bb2c-d725-4444-b04e-779763a0ff0b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T11:59:48.482+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T11:59:48.483+0800	INFO	service/article.go:135	req_id:714adfb7-80b9-4c8a-acd6-3d56142f1839|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:00:25.560+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:00:25.671+0800	INFO	service/article.go:47	req_id:f428cd9e-5ff3-4d9d-a2d0-0ca6e0b934c1|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:21 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:04:24.929+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:04:24.929+0800	INFO	service/article.go:135	req_id:3b0d11f2-9cc4-4fcd-955c-be4e8e55a3d5|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:04:27.523+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:04:27.524+0800	INFO	service/article.go:135	req_id:bfdb712d-d36b-4e64-8604-cabe6fcd3ad0|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:04:35.752+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:04:35.753+0800	INFO	service/article.go:135	req_id:90e9f47b-7698-4b86-a2fd-82194ec4541f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:04:48.447+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:04:48.448+0800	INFO	service/article.go:135	req_id:505b5db5-320e-4b71-9318-c3b651be240e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:04:49.696+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:04:49.837+0800	INFO	service/article.go:47	req_id:1058d9de-70f9-4a08-829b-a48f2268a57c|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:31 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:04:55.660+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:04:55.770+0800	INFO	service/article.go:47	req_id:427a257a-e7e7-4764-b88d-29996bc9201f|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:32 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:05:04.408+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:05:04.519+0800	INFO	service/article.go:47	req_id:52af7af8-561a-49e7-a77d-89de8731f192|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:33 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:05:06.099+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:05:06.206+0800	INFO	service/article.go:47	req_id:276102bf-f1ae-4cb4-a112-4e98246587f0|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:34 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:05:07.016+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:05:07.141+0800	INFO	service/article.go:47	req_id:8a6c2969-30a6-4a0c-a9a1-6c69a3961809|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:35 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:05:07.797+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:05:07.925+0800	INFO	service/article.go:47	req_id:f01365f5-909c-414c-8dd3-f1e804c0846a|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:36 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:05:10.895+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:05:10.896+0800	INFO	service/article.go:135	req_id:aee69d5c-c9d8-473d-bd72-88b64f422eb7|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:05:16.202+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:05:16.203+0800	INFO	service/article.go:135	req_id:37c2ca2e-f6a7-41e8-ad07-f8fb01a55a4f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:07:56.054+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:07:56.055+0800	INFO	service/article.go:135	req_id:7d0a9f52-604d-4f8e-bdf3-706a35bc7d7d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:07:57.803+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:07:57.803+0800	INFO	service/article.go:135	req_id:b38b7063-9c70-48fd-81f0-8e4722d3c3c2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:08:15.928+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:08:16.053+0800	INFO	service/article.go:47	req_id:06719f7b-eafe-4885-91a0-47363763222d|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:37 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:08:35.889+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:08:36.008+0800	INFO	service/article.go:47	req_id:c1931aba-323e-4ac8-a06d-da8961b9a7e0|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:38 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:08:36.021+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:08:36.124+0800	INFO	service/article.go:47	req_id:dcb7c301-2bc2-4325-84a9-f41dbec8b8b2|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:22 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:08:43.489+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:08:43.490+0800	INFO	service/article.go:135	req_id:e5aca761-2d2e-400d-9c9c-375a943728fb|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:09:18.119+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:09:18.119+0800	INFO	service/article.go:135	req_id:03db6115-e171-4c8a-bf00-8fc1e1bf168a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:09:23.494+0800	INFO	article/guest_view.go:39	view article req:&{3}

2024-11-03T12:09:23.615+0800	INFO	service/article.go:47	req_id:f15337ce-4460-4d8d-837f-676c8b269d85|view article info: &{ID:3 UserID:1 Title:![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 TopUrl:https://img.alowlife.com/i/2024/11/02/12a08wt.png View:2 Status:1 CreateTime:1730548494 UpdateTime:1730548825}
2024-11-03T12:09:25.994+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:09:25.995+0800	INFO	service/article.go:135	req_id:6845d979-62cd-4e80-93e0-c18950583d7e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:09:27.021+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:09:27.141+0800	INFO	service/article.go:47	req_id:ce5e2626-fdb9-4e66-a747-52294b59c532|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:23 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:09:30.165+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:09:30.165+0800	INFO	service/article.go:135	req_id:67c63cb1-ef2c-4181-8ec4-754b9939c3ef|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:09:31.862+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:09:31.863+0800	INFO	service/article.go:135	req_id:7664538b-fadd-402c-8746-51ba9c591454|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:09:34.142+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:09:34.264+0800	INFO	service/article.go:47	req_id:95710810-4e44-4e58-a66d-b51ec906bccd|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:39 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:09:38.488+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:09:38.489+0800	INFO	service/article.go:135	req_id:1eae06bf-ad5e-43c1-ad45-d969f4610938|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:09:52.584+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:09:52.585+0800	INFO	service/article.go:135	req_id:43680961-dd40-4334-933b-2b7f5b62a604|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:09:54.110+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:09:54.234+0800	INFO	service/article.go:47	req_id:4a180d40-4fa4-4cb1-a8fa-1960552f9dc7|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:24 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:09:57.139+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:09:57.140+0800	INFO	service/article.go:135	req_id:fe5a012b-458a-4714-96ab-aee54521eb1e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:09:58.742+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:09:58.743+0800	INFO	service/article.go:135	req_id:f8b6d38c-2619-47f0-ba37-ff71e83b2130|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:09:59.975+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:10:00.104+0800	INFO	service/article.go:47	req_id:187e6d79-2fee-460e-858c-8f2642d46c94|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:40 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:10:02.382+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:10:02.382+0800	INFO	service/article.go:135	req_id:3008e98e-aeb1-4b92-a450-260ccb7c09fd|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:11:35.194+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T12:11:35.318+0800	INFO	service/article.go:47	req_id:2d543203-b3bc-4394-8fef-a8aa6c5d3c15|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:13 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T12:11:52.232+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T12:11:52.340+0800	INFO	service/article.go:47	req_id:9bbfee99-a83d-4b69-aa52-a06d1aeb56f9|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:14 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T12:11:53.038+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:11:53.038+0800	INFO	service/article.go:135	req_id:68bd1e84-4df4-47e5-afe5-396529c1ff75|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:12:20.941+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:12:20.942+0800	INFO	service/article.go:135	req_id:828fbf5e-1eb6-406a-abf9-99e35e2087f6|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:12:24.089+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:12:24.217+0800	INFO	service/article.go:47	req_id:3e7ac5d6-80bc-4ca0-a26a-48b933566f52|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:25 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:12:27.544+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:12:27.544+0800	INFO	service/article.go:135	req_id:507a43ac-929e-40bf-ae16-137318fe4ffc|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:12:29.324+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:12:29.325+0800	INFO	service/article.go:135	req_id:d4526daa-7e69-4eb7-9631-eb3e6877f320|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:12:31.091+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:12:31.212+0800	INFO	service/article.go:47	req_id:a6e5f5d2-0bbf-42a3-b8eb-7a2326787638|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:41 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:12:33.538+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:12:33.538+0800	INFO	service/article.go:135	req_id:54c615eb-bdbc-466d-80fb-48a661d47625|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:12:39.961+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:12:39.962+0800	INFO	service/article.go:135	req_id:1efa9fce-580f-4006-90a1-00ba5947e3f6|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:12:40.724+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:12:40.838+0800	INFO	service/article.go:47	req_id:0ec4bfc1-f399-46f3-b3d1-56000d9f8eec|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:42 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:13:11.982+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:13:12.097+0800	INFO	service/article.go:47	req_id:71d3a386-0bf4-4c0e-a44a-411f0c0a0667|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:43 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:13:13.091+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:13:13.201+0800	INFO	service/article.go:47	req_id:992cb5b0-71d1-4da0-9c7d-b352752a02ff|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:44 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:13:14.205+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:13:14.312+0800	INFO	service/article.go:47	req_id:cd8d30f7-a9cb-4de6-9762-119b824d254f|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:45 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:13:14.613+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:13:14.735+0800	INFO	service/article.go:47	req_id:ea711543-7b09-42e3-9176-6383e2ee86c7|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:46 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:13:28.993+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:13:28.993+0800	INFO	service/article.go:135	req_id:8fbd54c3-94b7-4987-825d-fa761ab2a931|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:16:00.062+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:16:00.062+0800	INFO	service/article.go:135	req_id:ab79ee2b-c516-41eb-b4ce-6a290eb237fd|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:16:07.500+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:16:07.614+0800	INFO	service/article.go:47	req_id:14f47b86-9008-4454-8d9f-303512db065d|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:26 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:16:09.328+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:16:09.328+0800	INFO	service/article.go:135	req_id:cbdee635-babd-43a5-9c73-7dcdf59ee82b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:16:15.305+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:16:15.305+0800	INFO	service/article.go:135	req_id:25f2c9a5-cd8a-42b1-b9b7-39b1ae97c0b8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:16:20.082+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:16:20.082+0800	INFO	service/article.go:135	req_id:1a72d960-0e3c-4429-a31d-4e1d0e4088fb|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:17:20.049+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:17:20.050+0800	INFO	service/article.go:135	req_id:6fde127e-ed80-4fc5-9bbc-0959eddb06e0|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:17:24.019+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:17:24.019+0800	INFO	service/article.go:135	req_id:a4cb4f98-ca85-4bac-a5aa-34042d6790d0|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:17:46.689+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:17:46.690+0800	INFO	service/article.go:135	req_id:b7e950d6-2451-4699-8945-c3ece7a6e4f2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:17:47.556+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:17:47.557+0800	INFO	service/article.go:135	req_id:38fc77d0-0a98-404a-9963-bd85beb81d7e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:17:48.014+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:17:48.015+0800	INFO	service/article.go:135	req_id:df197720-af19-4bc2-b27b-0615d3afa1d2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:18:33.501+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:18:33.503+0800	INFO	service/article.go:135	req_id:8acb5c2c-aa67-4072-a156-9ae2bb16ce99|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:19:18.624+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:19:18.625+0800	INFO	service/article.go:135	req_id:823b80e8-8bb2-416e-8af4-f96ab971a773|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:19:31.531+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:19:31.532+0800	INFO	service/article.go:135	req_id:acb7327a-12c9-4eb8-b605-80c59dbff93b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:19:32.117+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:19:32.118+0800	INFO	service/article.go:135	req_id:0daa0e5f-cb4b-4e60-bb9c-05fe3c973e5c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:19:32.938+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:19:32.939+0800	INFO	service/article.go:135	req_id:04b1d62f-489e-407a-b120-c60e78c9429f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:19:33.529+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:19:33.530+0800	INFO	service/article.go:135	req_id:ff4e7f69-517d-475a-ba45-457f22d27bc5|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:19:53.607+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:19:53.607+0800	INFO	service/article.go:135	req_id:218f3aec-bb7d-4df9-a0f5-a2cb826e750f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:19:53.682+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:19:53.683+0800	INFO	service/article.go:135	req_id:7846656f-a952-4735-8853-1e33ff95ab5b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:20:09.313+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:20:09.314+0800	INFO	service/article.go:135	req_id:38283c73-d416-45af-8cd2-136562891919|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:20:40.759+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:20:40.760+0800	INFO	service/article.go:135	req_id:7194e09a-1246-42bb-918b-63783456f263|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:20:53.553+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:20:53.554+0800	INFO	service/article.go:135	req_id:07fbe555-b788-4642-9d93-c1c063fe22ca|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:21:33.267+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:21:33.267+0800	INFO	service/article.go:135	req_id:18304077-7d6c-4669-a055-064214bd4f35|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:21:34.846+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T12:21:34.987+0800	INFO	service/article.go:47	req_id:93349ba0-f4e6-4a6f-a2f7-77cbb81bcafc|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:15 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T12:21:36.432+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:21:36.432+0800	INFO	service/article.go:135	req_id:be15fd5d-4afa-4917-9d24-f3c729a76a80|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:21:56.283+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:21:56.285+0800	INFO	service/article.go:135	req_id:860ff536-d141-4d4e-b949-d02ea8658601|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:22:04.006+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:22:04.006+0800	INFO	service/article.go:135	req_id:9cb75814-58cc-4496-8800-8d6a195be26d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:22:46.557+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:22:46.558+0800	INFO	service/article.go:135	req_id:201a82ba-a543-45d3-b177-2c69dab0d17c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:23:05.692+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:23:05.692+0800	INFO	service/article.go:135	req_id:9f6ee03a-c792-4ec6-b80f-e7dc1b9f5d7c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:23:20.688+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:23:20.688+0800	INFO	service/article.go:135	req_id:0c136e07-8245-4da7-866e-a0eeeb7c91e2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:23:45.285+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:23:45.285+0800	INFO	service/article.go:135	req_id:89494cc0-ae71-482e-9692-076fd7c9e5ae|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:23:45.549+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:23:45.550+0800	INFO	service/article.go:135	req_id:a43d7adc-e8f3-4417-8dc5-b40380c51dd5|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:24:14.650+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:24:14.650+0800	INFO	service/article.go:135	req_id:4ddc8856-ec1d-4091-8bd8-7c74bdc120ad|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:24:24.530+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:24:24.530+0800	INFO	service/article.go:135	req_id:10324373-58ad-46f4-b33a-cbd1e852beef|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:24:32.612+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:24:32.613+0800	INFO	service/article.go:135	req_id:1b8c7c6a-b19b-4b7f-8329-9d7aeca2d083|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:24:54.054+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:24:54.055+0800	INFO	service/article.go:135	req_id:a360749f-021a-4188-b4dc-827e8fea9a3e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:25:02.066+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:25:02.207+0800	INFO	service/article.go:47	req_id:a7ad33e8-c582-4d1e-a2d5-bc1f6b4e4282|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:27 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:25:03.721+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:25:03.722+0800	INFO	service/article.go:135	req_id:d54f2391-807b-463f-9f36-38570c244e77|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:25:10.916+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:25:10.916+0800	INFO	service/article.go:135	req_id:8a3f4742-0d25-4658-8ee7-97db08612d4f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:25:38.297+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:25:38.298+0800	INFO	service/article.go:135	req_id:d73e31ee-d983-4329-9488-25319d68d050|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:26:17.825+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:26:17.825+0800	INFO	service/article.go:135	req_id:f417d0e8-87fa-4117-bef0-d741093e0ce6|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:26:28.335+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:26:28.336+0800	INFO	service/article.go:135	req_id:ee17c10f-93d4-4f54-90bf-00a755029087|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:26:36.859+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:26:36.860+0800	INFO	service/article.go:135	req_id:e57d2795-6f37-4b9e-b812-6d7fd89082bc|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:26:53.154+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:26:53.156+0800	INFO	service/article.go:135	req_id:ef4377c9-18c5-4249-ae63-4d4d2aa26a96|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:27:01.700+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:27:01.701+0800	INFO	service/article.go:135	req_id:c54a155f-028f-4701-9a5b-d3a70d0337db|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:27:19.197+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:27:19.198+0800	INFO	service/article.go:135	req_id:24b4934b-0e76-42c3-9031-6e66c9b3eeed|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:27:29.760+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:27:29.761+0800	INFO	service/article.go:135	req_id:6628292c-55f5-4690-adb0-1c06755943f9|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:28:07.380+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:28:07.381+0800	INFO	service/article.go:135	req_id:ca29aaf0-4c38-46d7-87d5-66bd3db48ea3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:28:17.730+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:28:17.730+0800	INFO	service/article.go:135	req_id:4108de67-f319-4ac8-8ad1-1f2a64cf4495|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:28:55.650+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:28:55.650+0800	INFO	service/article.go:135	req_id:72734912-333c-4a8b-a96b-064dbb8c941b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:30:00.429+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:30:00.429+0800	INFO	service/article.go:135	req_id:d930e5dd-2dbf-402a-b63c-9d9360a9b6ed|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:30:13.318+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:30:13.319+0800	INFO	service/article.go:135	req_id:3ffcf96e-107a-4fb7-a4ba-881f1aa2c160|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:30:46.373+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:30:46.374+0800	INFO	service/article.go:135	req_id:17e4226a-bf93-4d69-b361-e25a6f4ffced|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:31:03.777+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:31:03.777+0800	INFO	service/article.go:135	req_id:6d775445-680b-4d34-9ea2-59dbcd147773|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:32:08.099+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:32:08.099+0800	INFO	service/article.go:135	req_id:51c0e171-f79d-43ba-b68c-9b39a48c9d9f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:32:35.608+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:32:35.608+0800	INFO	service/article.go:135	req_id:9acfafea-c18d-4a81-864a-908c086ee6cb|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:33:07.954+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:33:07.954+0800	INFO	service/article.go:135	req_id:78044e63-bd47-469c-a68e-a5f4d4740592|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:33:21.837+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:33:21.837+0800	INFO	service/article.go:135	req_id:352d4d2e-ef6f-4393-b68f-65181ba5799c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:34:48.930+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:34:48.930+0800	INFO	service/article.go:135	req_id:892dcd0c-a301-4524-a1f4-a24359b1c6e8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:34:52.652+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:34:52.652+0800	INFO	service/article.go:135	req_id:1d9c2055-2dbd-4019-90f4-0167d3383288|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:35:23.768+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:35:23.769+0800	INFO	service/article.go:135	req_id:06be2c77-fe01-4bf5-8a54-b2e33b5455ca|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:35:41.601+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:35:41.602+0800	INFO	service/article.go:135	req_id:88506d7f-5fb9-4946-9ebb-20410e75190d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:35:58.545+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:35:58.545+0800	INFO	service/article.go:135	req_id:089e94ae-ac60-434e-ae0b-7d3dea12e032|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:36:11.599+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:36:11.599+0800	INFO	service/article.go:135	req_id:d9797cf9-c4fd-480d-b7a3-31667d044db0|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:36:34.426+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:36:34.428+0800	INFO	service/article.go:135	req_id:b6e58e1e-5117-40c8-8de0-607a7a8f1ed5|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:36:50.967+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:36:50.968+0800	INFO	service/article.go:135	req_id:e8b5bab6-0f17-4c59-a289-f0fe373debf9|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:37:02.704+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:37:02.705+0800	INFO	service/article.go:135	req_id:93133e0c-c469-4fd1-bc76-5d6e8268c1fa|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:37:22.671+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:37:22.671+0800	INFO	service/article.go:135	req_id:742c47bf-94d8-428b-a262-5d994d85063d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:37:46.329+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:37:46.330+0800	INFO	service/article.go:135	req_id:69cdec11-7a19-49b0-9072-5483e8b1f3c3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:38:14.063+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:38:14.064+0800	INFO	service/article.go:135	req_id:a71314d6-3b3f-4310-8889-601eb42a379b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:39:21.752+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:39:21.752+0800	INFO	service/article.go:135	req_id:9ee93610-c950-439c-882d-41f5eaf3a66c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:39:25.359+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:39:25.360+0800	INFO	service/article.go:135	req_id:9877680d-3904-4e71-b2c7-027b94df2013|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:39:33.000+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:39:33.122+0800	INFO	service/article.go:47	req_id:1da0b589-d269-4938-a330-8ce10f8c422b|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:28 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:39:37.069+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:39:37.070+0800	INFO	service/article.go:135	req_id:8926edc2-9967-46da-8380-52cd88cc243f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:39:39.111+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:39:39.112+0800	INFO	service/article.go:135	req_id:567a6ab8-8c68-411a-bec8-1221b36855d2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:39:40.564+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:39:40.691+0800	INFO	service/article.go:47	req_id:aeb5ca60-fb35-4503-9cd4-a9d483086d48|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:47 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:40:16.708+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:40:16.829+0800	INFO	service/article.go:47	req_id:e09e16b2-85a2-48c2-ae8a-06476b8bb540|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:48 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:40:51.740+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:40:51.862+0800	INFO	service/article.go:47	req_id:8fec1fab-ecdd-42e4-9016-3b13ef7434bc|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:49 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:40:56.295+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:40:56.295+0800	INFO	service/article.go:135	req_id:da7be3cb-1242-45c9-9172-b60a3a720c68|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:41:03.121+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:41:03.121+0800	INFO	service/article.go:135	req_id:6ab3282c-910c-4c58-b286-6bf7612cecb8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:41:06.331+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:41:06.331+0800	INFO	service/article.go:135	req_id:8630e29f-2137-4c63-be6e-3956d15a7685|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:41:26.356+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:41:26.357+0800	INFO	service/article.go:135	req_id:1dccfdd6-d34f-4f66-8dec-f5639ee82989|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:41:32.856+0800	INFO	article/guest_view.go:39	view article req:&{4}

2024-11-03T12:41:32.962+0800	INFO	service/article.go:47	req_id:04511233-de4f-417d-b671-010fd3aed50c|view article info: &{ID:4 UserID:1 Title:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:16 Status:1 CreateTime:1730542967 UpdateTime:1730542967}
2024-11-03T12:41:38.033+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:41:38.034+0800	INFO	service/article.go:135	req_id:390a15ce-5fc0-4ff5-be4e-8eb520d14a69|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:41:39.686+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:41:39.687+0800	INFO	service/article.go:135	req_id:9ffbb657-2e46-4f12-ae92-b9c4ab763262|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:41:40.847+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:41:40.969+0800	INFO	service/article.go:47	req_id:83079d32-2a1a-4ebf-be0b-1f7644a44e13|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:50 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:41:58.743+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:41:58.850+0800	INFO	service/article.go:47	req_id:441c4e4a-4b7d-4607-a2e4-ad16da9b3d9f|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:51 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:42:07.022+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:42:07.131+0800	INFO	service/article.go:47	req_id:668c61ec-6e6f-40cc-8b86-0b006f04a672|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:52 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:42:15.086+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:42:15.087+0800	INFO	service/article.go:135	req_id:2c009a82-7755-4af6-a538-71961a148b8a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:42:19.016+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:42:19.017+0800	INFO	service/article.go:135	req_id:219bbe4a-14e8-4507-abe1-bbeeac2ecc54|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:42:20.216+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:42:20.335+0800	INFO	service/article.go:47	req_id:326d945a-c9f9-4de8-89f7-ed984e2e8fef|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:53 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:42:46.714+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:42:46.861+0800	INFO	service/article.go:47	req_id:026073e7-db1f-40c6-9e56-71bf2666e817|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:54 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:42:49.327+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:42:49.327+0800	INFO	service/article.go:135	req_id:abafd28d-7a76-444e-9eed-fd0b99c529aa|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:42:59.189+0800	INFO	article/guest_view.go:39	view article req:&{3}

2024-11-03T12:42:59.293+0800	INFO	service/article.go:47	req_id:3cba5216-2e28-46cc-9f3d-8c2d3b5034ce|view article info: &{ID:3 UserID:1 Title:![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 TopUrl:https://img.alowlife.com/i/2024/11/02/12a08wt.png View:3 Status:1 CreateTime:1730548494 UpdateTime:1730548825}
2024-11-03T12:43:02.532+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:43:02.532+0800	INFO	service/article.go:135	req_id:7bccbaf6-301f-4da0-bbdf-147e5b14b265|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:43:04.050+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:43:04.050+0800	INFO	service/article.go:135	req_id:b6856bbc-3eaa-4948-b058-83a419de0425|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:43:05.307+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:43:05.439+0800	INFO	service/article.go:47	req_id:b36d79ab-db59-4774-8d75-69ffbe9a4afe|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:55 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:43:36.615+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:43:36.719+0800	INFO	service/article.go:47	req_id:946ee02f-2d11-4bcf-95d6-39f9d8c12a5e|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:56 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:43:46.770+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:43:46.877+0800	INFO	service/article.go:47	req_id:f875da1a-d8ac-4aba-8e6d-c4abff6fd944|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:57 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:44:06.044+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:44:06.176+0800	INFO	service/article.go:47	req_id:9b8f205f-09ab-4acb-ab09-dc4af4f35a0b|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:58 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:44:27.737+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:44:27.849+0800	INFO	service/article.go:47	req_id:3c9ac342-8c72-4318-aa74-4410d61756c1|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:59 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:44:48.988+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:44:49.107+0800	INFO	service/article.go:47	req_id:3a6a745a-08f0-4d61-bf3b-f5dd6cdabe68|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:60 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:45:01.531+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:45:01.646+0800	INFO	service/article.go:47	req_id:8c8902d3-b6c5-41fa-ab93-efc0fc673099|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:61 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:45:05.079+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:45:05.079+0800	INFO	service/article.go:135	req_id:c548fb7e-3fb5-44e1-af5a-e07fb286683f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:45:07.589+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:45:07.704+0800	INFO	service/article.go:47	req_id:b7388e43-4501-4164-8b09-5b94c3e0bd2a|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:29 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:45:32.284+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:45:32.284+0800	INFO	service/article.go:135	req_id:df574194-4ba6-457b-b41f-98f78d7421b4|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:45:50.577+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T12:45:50.692+0800	INFO	service/article.go:47	req_id:2c7fcffc-a694-427d-ab94-e9130d81d48f|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:30 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T12:45:54.438+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:45:54.439+0800	INFO	service/article.go:135	req_id:f9f60147-d40e-41c3-8c7e-8f928bcdf312|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:45:55.275+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:45:55.276+0800	INFO	service/article.go:135	req_id:7ca4ac47-51a4-408d-a23f-f978449ba60a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:46:06.397+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:46:06.397+0800	INFO	service/article.go:135	req_id:bcc14d01-3597-4508-84fa-c4b216984afe|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:46:23.336+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:46:23.337+0800	INFO	service/article.go:135	req_id:f404604e-2a1f-4195-ace1-b7d5e2d9f023|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:46:33.725+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:46:33.725+0800	INFO	service/article.go:135	req_id:e5d8bd87-4c10-4e8e-9a7a-c8fa16a1d3ce|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:46:35.969+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:46:35.969+0800	INFO	service/article.go:135	req_id:70304f75-5375-4942-a2e4-7012b8e35e66|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:46:37.009+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:46:37.009+0800	INFO	service/article.go:135	req_id:c2466d0f-b28a-418b-83af-7e2beb29616b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:46:37.374+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:46:37.375+0800	INFO	service/article.go:135	req_id:097497cd-52ab-49b0-814a-4b2c5a2a3c7d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:46:37.707+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:46:37.707+0800	INFO	service/article.go:135	req_id:e00bb93f-8420-4599-b27d-28423f9f85e4|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:46:38.011+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:46:38.011+0800	INFO	service/article.go:135	req_id:02500fc7-f608-478b-8058-072b0b99a773|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:46:38.284+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:46:38.285+0800	INFO	service/article.go:135	req_id:93cbdb6b-6f23-4164-8266-cbf19956af21|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:46:38.586+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:46:38.587+0800	INFO	service/article.go:135	req_id:1ed59e39-b027-4d51-8039-7e2808a38f41|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:46:38.797+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:46:38.797+0800	INFO	service/article.go:135	req_id:ccc5da76-ed82-4ce9-90e0-8d5a9ab71082|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:46:39.071+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:46:39.072+0800	INFO	service/article.go:135	req_id:c8f9ac0b-c9b5-4659-8e43-6b9624b0bd74|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:46:39.375+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:46:39.375+0800	INFO	service/article.go:135	req_id:e6b07826-a852-4c0b-b230-41605d37b2cf|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:46:39.843+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:46:39.843+0800	INFO	service/article.go:135	req_id:60ea45da-af9e-4c9a-a6bb-0c03ff239302|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:48:03.397+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:48:03.398+0800	INFO	service/article.go:135	req_id:adef0fc6-bea7-4b53-a832-7ff086d14d0a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:49:04.960+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:49:04.961+0800	INFO	service/article.go:135	req_id:f3e651a8-558e-469a-8f84-5de438e2c9ba|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:49:58.432+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:49:58.432+0800	INFO	service/article.go:135	req_id:a78babf2-a991-48e5-b84b-833d69803115|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:50:09.003+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:50:09.003+0800	INFO	service/article.go:135	req_id:dd8a91db-6c0a-4eeb-a997-873d26baa929|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:50:35.802+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:50:35.803+0800	INFO	service/article.go:135	req_id:3dec759c-00f2-49fd-a584-27ea00e3709e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:50:46.849+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:50:46.850+0800	INFO	service/article.go:135	req_id:b9cb7d1d-6393-45ef-abfc-fb50bfe5d81a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:51:16.514+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:51:16.515+0800	INFO	service/article.go:135	req_id:1c55f873-a58c-4126-b31f-0810d38fc120|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:51:42.945+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:51:42.945+0800	INFO	service/article.go:135	req_id:833d3a2e-38c6-4d27-ab29-5d86486a42d1|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:51:49.716+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:51:49.717+0800	INFO	service/article.go:135	req_id:bf162187-4e23-4faa-8eac-1044a49878e8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:51:56.361+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:51:56.362+0800	INFO	service/article.go:135	req_id:82f2682a-ee09-4d56-abae-534544ef7047|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:52:09.190+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:52:09.190+0800	INFO	service/article.go:135	req_id:eb080343-a19f-456c-b290-9f81c08861b8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:52:29.512+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:52:29.512+0800	INFO	service/article.go:135	req_id:7aa1292a-63c9-4095-9d0f-ff9f8c18e223|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:52:33.331+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:52:33.331+0800	INFO	service/article.go:135	req_id:6d0b5860-26b5-4640-ab9c-0f558c4e7db2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:52:35.301+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:52:35.302+0800	INFO	service/article.go:135	req_id:4bbf5eca-016d-4948-81c0-aaadf3715887|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:52:38.727+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:52:38.728+0800	INFO	service/article.go:135	req_id:b2cedeff-e016-4f2d-a345-ca2867c46ddd|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:52:56.226+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:52:56.227+0800	INFO	service/article.go:135	req_id:80af9301-0bc7-49a6-865b-d0c1949c4fd2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:53:08.001+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:53:08.002+0800	INFO	service/article.go:135	req_id:8c24f767-3177-4552-8eed-49ce9bb941bd|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:53:34.424+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:53:34.424+0800	INFO	service/article.go:135	req_id:12ac7bb9-bb5e-4e38-9514-02b37e3cf345|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:53:40.081+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:53:40.082+0800	INFO	service/article.go:135	req_id:28780813-fa07-4069-9e6a-53af75bc4df4|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:55:47.092+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:55:47.092+0800	INFO	service/article.go:135	req_id:53d663e1-0a34-49d9-bfd2-b89a06a29d94|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:56:18.117+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:56:18.119+0800	INFO	service/article.go:135	req_id:e50f8646-9551-4e71-b307-ca1fe8655366|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:56:28.504+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:56:28.505+0800	INFO	service/article.go:135	req_id:628196ad-fe49-4361-a70f-9e3b7116fcdf|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:56:32.625+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:56:32.625+0800	INFO	service/article.go:135	req_id:85cddc6f-c043-46bc-8d3c-f95b44656c11|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:56:37.112+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:56:37.113+0800	INFO	service/article.go:135	req_id:b9fe11ac-7fe7-40df-9d79-4c35a6da0cd3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:56:41.107+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:56:41.110+0800	INFO	service/article.go:135	req_id:124d03fc-7b71-4466-9a2c-7daf6c8e6614|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:56:41.752+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:56:41.753+0800	INFO	service/article.go:135	req_id:3198b57d-afbe-4681-8c2a-ae7194e17abf|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:56:45.482+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:56:45.482+0800	INFO	service/article.go:135	req_id:2cfbcb81-3276-4ce0-a8b3-bef367ed2317|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:56:59.139+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:56:59.140+0800	INFO	service/article.go:135	req_id:0e40b7ff-4079-41a0-bce5-b51f1067646b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:57:13.657+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:57:13.658+0800	INFO	service/article.go:135	req_id:4dea2ea2-c704-4290-88cf-cb27df5aae7e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:57:47.376+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:57:47.376+0800	INFO	service/article.go:135	req_id:46c42104-ce6e-4eee-a456-2f636573831c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:57:48.662+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T12:57:48.662+0800	INFO	service/article.go:135	req_id:c2e2a241-03e4-4d71-bd35-e41b1db9844e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T12:57:54.258+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T12:57:54.258+0800	INFO	service/article.go:135	req_id:779cd25c-62c4-4f6a-87db-d027d3f13e6b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T12:57:59.506+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T12:57:59.507+0800	INFO	service/article.go:135	req_id:981c2eb6-e4de-458e-add1-32862d5ceb47|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T12:58:01.115+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:58:01.255+0800	INFO	service/article.go:47	req_id:a19c634b-b20d-4e47-8185-2c3535b78ceb|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:62 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:58:16.402+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:58:16.572+0800	INFO	service/article.go:47	req_id:05377eec-b5e5-4eaa-ad12-433c300483c3|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:63 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:58:51.228+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:58:51.348+0800	INFO	service/article.go:47	req_id:4506770a-ea83-47fa-889c-95a2729e682c|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:64 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:58:51.425+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:58:51.547+0800	INFO	service/article.go:47	req_id:52829094-4db3-4ff7-ac41-0caa9472885e|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:65 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:59:18.194+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:59:18.308+0800	INFO	service/article.go:47	req_id:6f528322-5c95-4a22-b937-ba20b88a620a|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:66 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:59:18.422+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:59:18.542+0800	INFO	service/article.go:47	req_id:4ca2ca7d-e6a6-4bae-8bca-c65d174609e8|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:67 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:59:30.307+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:59:30.387+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:59:30.442+0800	INFO	service/article.go:47	req_id:062ed71a-0344-4a2a-8b6b-649816373520|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:68 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:59:30.552+0800	INFO	service/article.go:47	req_id:d2d8cd24-83a6-404a-938d-7a9a43c3f006|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:68 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:59:38.298+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:59:38.390+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:59:38.424+0800	INFO	service/article.go:47	req_id:2dc1bce1-79e4-469a-8d46-eed0341d7daf|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:69 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:59:38.491+0800	INFO	service/article.go:47	req_id:af340ab5-ff41-48ad-ad89-f767dbcc5be8|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:69 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:59:45.590+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:59:45.728+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T12:59:45.728+0800	INFO	service/article.go:47	req_id:939ea45e-e0b6-443b-9743-e3560cd9c62f|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:70 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T12:59:45.841+0800	INFO	service/article.go:47	req_id:c354672b-babb-42a6-8a97-333eb4e8e141|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:71 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:00:00.496+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:00:00.574+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:00:00.622+0800	INFO	service/article.go:47	req_id:1c937511-8c72-4b8e-b9e0-0f993c46acf8|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:72 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:00:00.681+0800	INFO	service/article.go:47	req_id:f7099bbf-1d1a-4d69-8be7-b9b4ac403c65|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:72 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:00:04.987+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:00:04.988+0800	INFO	service/article.go:135	req_id:d574c8dd-ae81-4dde-8885-89b8309f4e46|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:00:08.149+0800	INFO	article/guest_view.go:39	view article req:&{3}

2024-11-03T13:00:08.272+0800	INFO	service/article.go:47	req_id:75b98ca5-bba1-4c44-a37e-69d5ca950878|view article info: &{ID:3 UserID:1 Title:![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 TopUrl:https://img.alowlife.com/i/2024/11/02/12a08wt.png View:4 Status:1 CreateTime:1730548494 UpdateTime:1730548825}
2024-11-03T13:00:10.418+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:00:10.418+0800	INFO	service/article.go:135	req_id:ca7b35d0-4f2a-44d0-8f91-d0de0cc411fd|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:00:22.771+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:00:22.771+0800	INFO	service/article.go:135	req_id:959cb598-aa01-4539-9dd3-007cd73cefbd|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:00:24.899+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:00:24.901+0800	INFO	service/article.go:135	req_id:8d9f0557-8559-48d7-9aaa-02e514d6e32f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:00:28.161+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:00:28.162+0800	INFO	service/article.go:135	req_id:ee2c18ce-525c-44e8-a374-38ed69dd4748|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:00:30.126+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:00:30.127+0800	INFO	service/article.go:135	req_id:83234138-5c4b-4b72-b7ee-f446656703cb|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:00:32.352+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:00:32.352+0800	INFO	service/article.go:135	req_id:dcd1b3f9-aadd-48b1-a267-3bc5f9c7dbb3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:00:33.609+0800	INFO	article/guest_view.go:39	view article req:&{3}

2024-11-03T13:00:33.740+0800	INFO	service/article.go:47	req_id:7d4c4e0a-e6f5-4546-8225-e911cb967ac1|view article info: &{ID:3 UserID:1 Title:![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 TopUrl:https://img.alowlife.com/i/2024/11/02/12a08wt.png View:5 Status:1 CreateTime:1730548494 UpdateTime:1730548825}
2024-11-03T13:01:22.273+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:01:22.311+0800	INFO	article/guest_view.go:39	view article req:&{3}

2024-11-03T13:01:22.398+0800	INFO	service/article.go:47	req_id:e4b7e804-2bfa-4c77-93f1-393979408c5b|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:73 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:01:22.436+0800	INFO	service/article.go:47	req_id:04cb8cf8-6a5a-4921-ab8f-b69afe73c561|view article info: &{ID:3 UserID:1 Title:![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 TopUrl:https://img.alowlife.com/i/2024/11/02/12a08wt.png View:6 Status:1 CreateTime:1730548494 UpdateTime:1730548825}
2024-11-03T13:01:24.835+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:01:24.836+0800	INFO	service/article.go:135	req_id:39801980-b04c-4833-802c-55b708ef8e2b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:01:27.829+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:01:27.830+0800	INFO	service/article.go:135	req_id:32b6b602-95c0-45df-88cb-95d89a6ac7df|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:01:32.800+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:01:32.800+0800	INFO	service/article.go:135	req_id:7fe3d678-bff1-4974-bda3-8e15f16436b7|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:01:41.946+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:01:41.947+0800	INFO	service/article.go:135	req_id:fb87f298-7fdd-4dd3-8ee8-8e9ab935e686|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:01:48.660+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:01:48.661+0800	INFO	service/article.go:135	req_id:e04a2211-fe16-46d6-9c04-b50fa340c6af|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:01:51.297+0800	INFO	article/guest_view.go:39	view article req:&{3}

2024-11-03T13:01:51.422+0800	INFO	service/article.go:47	req_id:74aefb8d-33e1-4865-987d-da03c0981baa|view article info: &{ID:3 UserID:1 Title:![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 TopUrl:https://img.alowlife.com/i/2024/11/02/12a08wt.png View:7 Status:1 CreateTime:1730548494 UpdateTime:1730548825}
2024-11-03T13:01:52.842+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:01:52.842+0800	INFO	service/article.go:135	req_id:95490297-7c76-401b-b484-1a7913040156|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:02:16.523+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:02:16.523+0800	INFO	service/article.go:135	req_id:a5835344-94ca-40c4-8692-971a1ea6502a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:02:16.908+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:02:17.032+0800	INFO	service/article.go:47	req_id:1c31641f-22bb-4f3f-9481-bee4aa3057a9|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:74 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:02:25.104+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:02:25.105+0800	INFO	service/article.go:135	req_id:420233a3-fa68-4bd3-993b-382e94172877|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:02:25.112+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:02:25.238+0800	INFO	service/article.go:47	req_id:8696df34-1ff8-48d6-b408-42704f3b6d02|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:75 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:02:26.557+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:02:26.557+0800	INFO	service/article.go:135	req_id:e9c308a0-a02e-43fc-bb98-03ca06c6033c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:02:26.611+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:02:26.722+0800	INFO	service/article.go:47	req_id:6dcd2d8b-b9a6-4acb-a034-070b2c44cdd7|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:76 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:02:29.384+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:02:29.384+0800	INFO	service/article.go:135	req_id:7c4a67d9-3164-48d7-a8cb-563df43c2ae3|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:02:31.118+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T13:02:31.229+0800	INFO	service/article.go:47	req_id:7a808268-c2bb-44c8-b4dd-85e7f5608645|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:31 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T13:02:33.760+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:02:33.760+0800	INFO	service/article.go:135	req_id:dad6b711-ba2f-43b1-bf52-6aa4c23400bd|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:02:35.286+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:02:35.287+0800	INFO	service/article.go:135	req_id:1e47fea0-b118-4ec7-9e31-eb67c6a3f500|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:02:36.655+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:02:36.772+0800	INFO	service/article.go:47	req_id:afff4a76-926e-4986-9606-da101e21847a|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:77 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:02:43.221+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:02:43.222+0800	INFO	service/article.go:135	req_id:870d3007-c799-4364-a582-0039e73217af|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:02:45.732+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:02:45.732+0800	INFO	service/article.go:135	req_id:e4def45a-b71a-43ae-9500-d3fcc361d19e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:03:04.995+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:03:05.106+0800	INFO	service/article.go:47	req_id:750ea5ec-b659-46d5-8865-9c8cfaa5711c|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:78 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:03:05.175+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:03:05.175+0800	INFO	service/article.go:135	req_id:febe44a0-4d7a-4292-a1c3-57fb95324a33|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:03:14.156+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:03:14.244+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:03:14.245+0800	INFO	service/article.go:135	req_id:c550ac27-921e-4547-a419-6b75cc620776|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:03:14.270+0800	INFO	service/article.go:47	req_id:815b3d4d-8c04-4e67-853d-1c172efd121b|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:79 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:03:23.819+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:03:23.820+0800	INFO	service/article.go:135	req_id:477483b2-3881-430e-9898-36e2d6ebc243|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:03:24.088+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:03:24.218+0800	INFO	service/article.go:47	req_id:107ab15f-6915-46e5-b47a-261f78be9eb8|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:80 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:03:48.236+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:03:48.236+0800	INFO	service/article.go:135	req_id:cee08504-7431-430e-a2d3-63cad88f13ec|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:03:48.408+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:03:48.525+0800	INFO	service/article.go:47	req_id:31637659-4fcc-4959-843b-5e68faed3160|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:81 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:03:59.028+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:03:59.028+0800	INFO	service/article.go:135	req_id:3df8ebb5-9a96-4a19-881f-2463e8f22a6b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:04:01.402+0800	INFO	article/guest_view.go:39	view article req:&{3}

2024-11-03T13:04:01.523+0800	INFO	service/article.go:47	req_id:a0d6d0e6-b9fb-4586-aeaa-f5d77e1c2e52|view article info: &{ID:3 UserID:1 Title:![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:第一篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 TopUrl:https://img.alowlife.com/i/2024/11/02/12a08wt.png View:8 Status:1 CreateTime:1730548494 UpdateTime:1730548825}
2024-11-03T13:04:04.088+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:04:04.088+0800	INFO	service/article.go:135	req_id:bbfb7fa0-6859-4826-9e0e-ca018ae39cbf|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:04:05.587+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:04:05.587+0800	INFO	service/article.go:135	req_id:21877a98-0577-4dcb-9536-648fea91ae81|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:04:08.268+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:04:08.268+0800	INFO	service/article.go:135	req_id:bf4656b9-f4b1-491d-a962-8c994f3dd295|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:04:21.717+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:04:21.718+0800	INFO	service/article.go:135	req_id:27ece793-5182-41cb-95e5-62c32d03ad68|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:04:32.234+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:04:32.302+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:04:32.303+0800	INFO	service/article.go:135	req_id:acfb7718-6b23-4310-a704-572cf9e283d4|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:04:32.393+0800	INFO	service/article.go:47	req_id:1b6cfbb0-285d-4090-b704-0ec88bf0e9e9|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:82 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:04:36.568+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:04:36.569+0800	INFO	service/article.go:135	req_id:4b082771-1fe5-4d04-84c4-9cffd7e7a3d9|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:04:37.437+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:04:37.557+0800	INFO	service/article.go:47	req_id:883cd24d-f4d1-4a54-abba-6bae68f41e7f|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:83 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:04:46.883+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:04:46.884+0800	INFO	service/article.go:135	req_id:847c1630-16e5-43a0-a029-868c816113fc|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:05:02.527+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:05:02.528+0800	INFO	service/article.go:135	req_id:0e4906de-7410-43b3-8307-f2298f6f5270|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:05:20.810+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:05:20.811+0800	INFO	service/article.go:135	req_id:bc4a1466-90c3-4da3-a70a-5a44123b4970|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:05:20.822+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:05:20.950+0800	INFO	service/article.go:47	req_id:d66102e9-3781-408d-9d4f-79fe92895da6|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:84 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:05:24.758+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:05:24.759+0800	INFO	service/article.go:135	req_id:92fbe36b-2442-465c-b400-11ef901439b0|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:05:25.902+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T13:05:26.023+0800	INFO	service/article.go:47	req_id:48de3e9a-48a2-4b8a-a265-7f6feeb39bb3|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:32 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T13:05:27.810+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:05:27.810+0800	INFO	service/article.go:135	req_id:34d63889-b74d-4b6a-931a-d4f5f26ca950|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:05:31.084+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:05:31.084+0800	INFO	service/article.go:135	req_id:9873a7e4-2205-4597-8298-1e40df69e440|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:05:32.291+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:05:32.419+0800	INFO	service/article.go:47	req_id:2c8f9e2b-f705-4d44-ac32-595938839593|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:85 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:05:34.339+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:05:34.339+0800	INFO	service/article.go:135	req_id:3d554e1e-95e4-4798-9809-f24779899a9f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:05:52.639+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:05:52.702+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:05:52.703+0800	INFO	service/article.go:135	req_id:c64c1c17-02bb-49bb-9f64-cf45d360940a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:05:52.751+0800	INFO	service/article.go:47	req_id:f55c8bb1-969b-4d61-b690-20ae967809c7|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:86 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:05:57.806+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:05:57.807+0800	INFO	service/article.go:135	req_id:dd55c3d4-ebc4-4687-b7d9-fddcc46c9aa2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:06:00.762+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:06:00.890+0800	INFO	service/article.go:47	req_id:ac7763ea-4e10-433c-aa46-76f60399daa0|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:87 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:06:10.138+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:06:10.139+0800	INFO	service/article.go:135	req_id:3034da92-ae15-4aad-bca6-fd48fc0d9687|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:14:39.926+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:14:39.927+0800	INFO	service/article.go:135	req_id:4a7ea057-8a41-4d52-ad70-29b557866edf|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:14:53.663+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:14:53.664+0800	INFO	service/article.go:135	req_id:78eb9eb6-6436-4f43-b0b2-80860e9dd030|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:14:54.812+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:14:54.813+0800	INFO	service/article.go:135	req_id:a8b7cb1e-78d7-478e-bddb-c9489d2d0b5e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:14:55.356+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:14:55.356+0800	INFO	service/article.go:135	req_id:6c0afa55-10e4-4f24-b9ab-fa16b0cb7db8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:14:58.770+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:14:58.770+0800	INFO	service/article.go:135	req_id:1a94b648-4927-4c75-b187-564330b98f22|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:15:09.026+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:15:09.027+0800	INFO	service/article.go:135	req_id:b1a16567-137e-49f4-9c7a-61ee66584f02|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:15:12.274+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:15:12.275+0800	INFO	service/article.go:135	req_id:ab91ce22-aa4a-482c-8d82-56be37c5fbd1|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:15:13.155+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:15:13.155+0800	INFO	service/article.go:135	req_id:a3b5bca6-29c8-4294-95ae-cb98663f2bd5|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:15:44.436+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T13:15:44.449+0800	INFO	service/user.go:42	req_id:509ab77d-e33b-4a1c-912b-06c4649616f8|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T13:18:29.631+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T13:18:29.637+0800	INFO	service/user.go:42	req_id:cf30c85e-17ed-4665-8cec-b9e0a164955b|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T13:18:29.729+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:18:29.729+0800	INFO	service/article.go:135	req_id:2b17dcb4-83de-4ffc-a9fc-997ccb610dd0|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:20:00.155+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:20:00.155+0800	INFO	service/article.go:135	req_id:1bc8e1bc-8c89-47c0-a7a7-a96964819b52|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:20:54.059+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:20:54.140+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:20:54.141+0800	INFO	service/article.go:135	req_id:27a5b833-3f18-4276-8eca-3f4cc464e50b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:20:54.200+0800	INFO	service/article.go:47	req_id:00b89928-0510-461e-8d90-dc83de7d95c1|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:88 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:20:55.285+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:20:55.286+0800	INFO	service/article.go:135	req_id:2d534e8e-ffdc-48e2-8e99-684039e7b08f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:20:58.821+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:20:58.822+0800	INFO	service/article.go:135	req_id:67f918aa-0cfe-431d-8366-ad6e81524972|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:21:01.383+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:21:01.385+0800	INFO	service/article.go:135	req_id:d0bb469b-ca73-4b5a-b5b3-247219ec04ec|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:22:13.979+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:22:13.980+0800	INFO	service/article.go:135	req_id:04b9ea24-04e7-4880-9da1-935b1d0f7e3f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:22:21.416+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:22:21.416+0800	INFO	service/article.go:135	req_id:6d2101b7-1703-4694-992d-6cf64a097a59|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:24:11.678+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:24:11.678+0800	INFO	service/article.go:135	req_id:f4d1a391-d1f3-4b7e-ac8e-f14033347aaa|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:24:14.057+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:24:14.058+0800	INFO	service/article.go:135	req_id:e283261e-927a-4a0d-9e7b-bc2d6e0a1111|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:24:16.461+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:24:16.462+0800	INFO	service/article.go:135	req_id:001c8ba0-9363-4649-90de-694b7ccd420d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:24:32.501+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:24:32.502+0800	INFO	service/article.go:135	req_id:de15d914-90a4-4095-a5a5-e0d965baaff6|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:24:35.211+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T13:24:35.326+0800	INFO	service/article.go:47	req_id:9ef145ab-5f2c-46bf-ad87-866f048c9895|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:33 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T13:29:28.514+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T13:29:28.669+0800	INFO	service/article.go:47	req_id:590753ac-bdc2-4ceb-93dd-67bb3536f413|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:34 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T13:29:29.641+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:29:29.643+0800	INFO	service/article.go:135	req_id:71c8ca30-f5fd-4f95-aefe-54bb6a396798|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:30:12.965+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:30:12.966+0800	INFO	service/article.go:135	req_id:0773a8db-2a68-433b-bc37-001b14cd075c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:30:13.298+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:30:13.431+0800	INFO	service/article.go:47	req_id:554f57d2-0a50-444b-8bce-122f2c6e2bf7|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:89 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:30:17.028+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:30:17.028+0800	INFO	service/article.go:135	req_id:3bffe3d6-734d-4bd4-aeb4-8ab66af32a45|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:31:20.716+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:31:20.716+0800	INFO	service/article.go:135	req_id:4e55fcbd-51cb-46b6-ad23-955f108ae1d1|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:31:24.832+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:31:24.832+0800	INFO	service/article.go:135	req_id:5e327c6d-8a6f-40f4-93a9-a6a1d626ad79|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:31:44.541+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:31:44.541+0800	INFO	service/article.go:135	req_id:ce44a30e-c584-492b-90bc-298d4b2e580f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:31:56.246+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:31:56.246+0800	INFO	service/article.go:135	req_id:2a8677de-5f74-4df5-8ac0-be60ccb30235|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:32:54.170+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:32:54.170+0800	INFO	service/article.go:135	req_id:cbc75d04-b227-46a7-ae38-5776f0015325|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:32:58.231+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:32:58.232+0800	INFO	service/article.go:135	req_id:812c304f-6080-4f23-a533-1a53b76e346a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:33:01.261+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:33:01.261+0800	INFO	service/article.go:135	req_id:cd226081-26ef-4671-b1f3-1506cf6b0b40|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:33:46.272+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:33:46.272+0800	INFO	service/article.go:135	req_id:f65eec6d-8a4b-45ef-a318-a369a3ae313a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:34:02.653+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:34:02.653+0800	INFO	service/article.go:135	req_id:8e976004-d01f-4ef0-a7be-4631faf0c051|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:34:36.511+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:34:36.511+0800	INFO	service/article.go:135	req_id:a7aa8e19-5971-47c1-9dea-5a05fee3fe0a|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:34:43.413+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:34:43.413+0800	INFO	service/article.go:135	req_id:f9286aef-f588-4d83-9cb7-0b7fa17bf112|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:35:55.207+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:35:55.207+0800	INFO	service/article.go:135	req_id:0d592d1d-6907-4b05-b879-1d306055aefb|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:35:57.968+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:35:57.968+0800	INFO	service/article.go:135	req_id:db02796e-b5a1-4fe0-857c-ad0278782ef2|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:36:01.516+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:36:01.516+0800	INFO	service/article.go:135	req_id:5b705e4c-c026-4f4f-8c6c-d4de40227067|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:36:08.638+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:36:08.638+0800	INFO	service/article.go:135	req_id:49f0acd3-0d83-4eba-9a87-1ad89474e0bc|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:37:50.387+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:37:50.387+0800	INFO	service/article.go:135	req_id:b865d08b-7bfc-4d24-80b5-146dad4ba51e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:37:51.566+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:37:51.684+0800	INFO	service/article.go:47	req_id:ee2e61af-bc2a-4340-8da8-cee92ce7c3b3|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:90 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:37:55.742+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:37:55.743+0800	INFO	service/article.go:135	req_id:607dbffe-3137-4aa7-bbda-f9e542bd6899|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:37:56.945+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:37:56.946+0800	INFO	service/article.go:135	req_id:dbb5ed7f-f021-4479-b1e3-f755f420e91d|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:37:57.424+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:37:57.426+0800	INFO	service/article.go:135	req_id:4ebb524f-eba6-4f09-a2a3-1f16ff2a49fb|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:37:57.808+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:37:57.808+0800	INFO	service/article.go:135	req_id:252c8b1d-9a39-4d6f-9529-e85c2b0e8438|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:38:14.700+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T13:38:14.709+0800	INFO	service/user.go:42	req_id:100623b6-9562-4866-83d2-d0568d02a4be|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T13:38:14.800+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:38:14.800+0800	INFO	service/article.go:135	req_id:d8b7c6af-8cba-428c-aa4d-6f42f1b9f647|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:38:23.534+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:38:23.535+0800	INFO	service/article.go:135	req_id:822c7fda-a06c-4090-9998-bb97c4150caa|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:38:35.646+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:38:35.646+0800	INFO	service/article.go:135	req_id:f473c324-d9dd-41c6-a72d-0faa7cdfbe34|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:40:39.547+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:40:39.548+0800	INFO	service/article.go:135	req_id:ddbed52c-7c42-4b5f-ad2d-a6f00104b4da|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:40:43.411+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:40:43.411+0800	INFO	service/article.go:135	req_id:63f226de-9201-4757-9fd4-adee44242ddc|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:40:44.116+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:40:44.117+0800	INFO	service/article.go:135	req_id:49749eb0-3975-430c-b521-2137d7589280|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:40:45.301+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:40:45.301+0800	INFO	service/article.go:135	req_id:d4b9e597-a21a-451d-971c-9c147e393632|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:43:13.145+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:43:13.146+0800	INFO	service/article.go:135	req_id:5edab19f-cff6-42e6-aba5-df642ec1d008|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:43:13.686+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:43:13.687+0800	INFO	service/article.go:135	req_id:923302e8-f49d-475c-b7ff-ed2d8336dfbe|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:43:15.237+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:43:15.238+0800	INFO	service/article.go:135	req_id:1196e46d-1f5b-4768-8d66-5e41de38c04c|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:43:16.092+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:43:16.093+0800	INFO	service/article.go:135	req_id:b7cd755c-c711-4f7c-b9ef-5c923b6ee516|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:43:22.653+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:43:22.655+0800	INFO	service/article.go:135	req_id:c2c83c66-e4a6-44b1-a8b6-77c118f25d75|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:46:00.742+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:46:00.743+0800	INFO	service/article.go:135	req_id:98bf6ecc-022b-4657-8e6b-999526c22d80|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:46:02.499+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:46:02.499+0800	INFO	service/article.go:135	req_id:a39fd4d8-a11d-4651-8a56-9c76f2c62019|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:46:03.959+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:46:03.960+0800	INFO	service/article.go:135	req_id:aa25bb1d-7ee4-448a-962c-d9825b1d8e2f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:46:12.370+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:46:12.372+0800	INFO	service/article.go:135	req_id:60fff894-c5ba-4938-9876-d8b16b00b348|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:46:12.786+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:46:12.786+0800	INFO	service/article.go:135	req_id:d83a3351-7315-4225-b3de-d93c51360c7b|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:47:03.530+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T13:47:03.655+0800	INFO	service/article.go:47	req_id:e8209932-24c7-4159-bf4e-41bd5aa2f68e|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:35 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T13:47:06.566+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:47:06.566+0800	INFO	service/article.go:135	req_id:7bf29f48-3a2d-40be-85f2-b014a2a6a38f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:47:08.238+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:47:08.239+0800	INFO	service/article.go:135	req_id:5ca548da-e88a-4d19-a6af-348440de58d1|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:47:11.729+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:47:11.854+0800	INFO	service/article.go:47	req_id:e8d78b3a-e6b9-404c-b663-e380045cd538|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:91 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:47:12.932+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:47:12.933+0800	INFO	service/article.go:135	req_id:7db9f99d-c0cd-4ecb-8941-1e7adfea3ad8|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:47:17.571+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:47:17.571+0800	INFO	service/article.go:135	req_id:361e186f-97c7-421c-9a59-50782f40879f|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:47:18.275+0800	INFO	article/guest_view.go:39	view article req:&{1}

2024-11-03T13:47:18.396+0800	INFO	service/article.go:47	req_id:da00ceb4-da37-48ba-8818-45c46eb99a54|view article info: &{ID:1 UserID:1 Title:第一篇这是文章 Content:

## SQL优化



SQL优化就是将一条SQL写的更加简洁，让SQL的执行速度更快，易读性与维护性更好



tip ：无论什么关系型数据库，本质上SQL的语法都是相同的，因为他们都实现了相同的SQL标准，不同数据库之间仅支持的特性不同而已



写SQL卡壳时不要想着一步到位，试着拆分化繁为简逐步实现

`扎实的基础理论知识，会决定一个人水平非得有多高，但能够将相应的理论用于实践，这才能真正体现出一个人的水平有多牛`



### SQL优化技巧*16

1. 查询尽量不要用 * （分析成本高，网络开销大，内存占用变高，维护性变差）

2. 连表查询尽量不要关联太多表

3. 多表查询一定要以小驱大（Nest Loop Join算法）

4. 不要使用like左模糊和全模糊查询

5. 尽量不要对字段做空值判断（会让索引失效，判断null的情况不会走索引）

6. 不要在条件查询 = 前作运算

7. !=、!<>、not in 、 not like 、 or 慎用（不走索引）

8. 必要情况下可以强制走索引

9. 避免频繁创建、销毁临时表（操作内存，频繁创建销毁造成负担）

10. 尽量将大事务拆分为小事务执行

11. 从业务设计层面减少大量数据返回的情况

12. 尽量避免深分页的情况（limit 10000, 10 会查找10010条数据后，丢掉前面的10000条数据，及其浪费资源）（可以基于有序字段来控制页数 select xx from yy where 有序字段 > zzz limit 10）

13. SQL务必要写完整，不要缩写

    ```sql
    #简写
    select * from a, b where a.xx=b.xx
    #完整写
    select * from a inner join b on a.xx=b.xx;
    ```

    

14. 基于联合索引查询时务必保证字段的顺序性（最左前缀原则）

15. 客户端的一些操作可以批量化完成

16. 明确仅返回一条数据的语句可以使用limit 1



tip SQL 的行业标准

1. 客户端访问1秒内得到响应，体验好
2. 1~3得到响应， 体验还可以
3. 3~5，慢
4. \>5 特别糟糕

三秒原则hh



### 索引优化

#### explain分析工具

在一条SQL前加上explain命令，执行这条SQL后回列出所有的执行方案

```sql
EXPLAIN SELECT * FROM `zz_users`;
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+
|  1 | SIMPLE      | zz_users | ALL  | NULL          | NULL | NULL    | NULL |    3 |       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------+

```

![zuoguai240317k3Q7.png](https://img.alowlife.com/i/3/2024/03/17/zuoguai240317k3Q7-3.webp)

* `id`：执行计划的ID值，值越大，执行的优先级越高
* `select_type`：当前查询语句的类型
  * `simple`：简单查询
  * `primary`：复杂查询的外层查询
  * `subquery`：包含在查询语句中的子拆线呢
  * `derived`：包含在from中的子查询
* `table`：表示当前执行计划基于那张表
  * `<derivenN>`：基于id=N的查询结果集
  * `<unionM,N>`：会出现在查询类型为UNION RESULT的计划中
  * `<subqueryN>`：基于id=N的子查询结构
  * `<tableName>`：基于那张表
* `type`：当前执行计划查询的类型
  * `system/const`：只有一条匹配行
  * `eq_ref`：唯一查询，对于每个索引键值，只有唯一的一条记录
  * `ref`：非唯一性索引或唯一索引的前缀扫描
  * `range`：索引范围扫描
  * `index`：索引全扫描
  * `all`：全表查询
  * 最好优化到ref级别，最少也要range级别
* `possible_key`：可能走的索引
* `key`：实际使用的索引
* `key_len`：一般情况下为索引字段的长度
  * 如果索引是前缀索引，会使用声明的前N个字节来索引数据
  * 如果是联合索引，只会显示用到的索引字段长度
  * 如果一个索引的字段为空，key_len为：索引字段长度 +  1
* `ref`：
  * `const`：基于字段值或数据库已有的常量查询数据
  * `字段名`：基于该字段查询数据
  * `func`：与索引字段匹配的值是一个函数
* `rows`：预计会扫描的行数，不准确
* `filtered`：不会扫描到的数据的百分比
* `extra`：
  * `Using index`：利用索引覆盖机制拿到数据
  * `Using filesort`：磁盘+内存完成排序工作，完全加载到内存来完成排序

主要参考字段

1. key
2. type
3. rows
4. filtered
5. extra

###### 

### 总结







## MySQL调优

### 思想：

1. CPU、内存、磁盘IO

2. 优秀且适合的架构

3. 预防未来的流量压力，监控
4. 放弃追求完美
5. 出现瓶颈才调优，不要为了调优而调优





### 性能调优实现：

收益从高到低

1. 整体架构优化：引入中间件减轻数据库压力，优化MySQL架构提高可用性
2. MySQL结构的优化：合理库表结构，选择合适的数据类型，索引
3. 编码层优化：根据库表结构、索引结构优化业务SQL语句，提高索引命中率
4. MySQL参数优化：调整参数的默认值，根据业务将各类参数调整到合适的大小
5. 客户端与连接层的优化：调整连接池和连接层的参数



### 一、连接层优化



连接数不是越大越好

* 连接多意味着需要更多的线程。线程数远超CPU核心数时，线程上下文切换的开销，可能远大于线程执行的开销





连接池：分为客户端连接池、MySQL服务端连接池。需要关注客户端连接池



一般情况下：

最大连接数 = CPU核心数 * 2 + 有效磁盘数



配备大的等待队列：

连接池底层本质是线程池，对与线程池要处理高并发，需要配备一个较大的等待队列，无可用连接时，将待执行的SQL加入队列中阻塞等待



当有些业务的SQL执行时间过长：

可以单独开一个连接池，为耗时长的SQL提供服务





偶发高峰类业务条件下：

高峰业务下，并发会导致创建大量连接，常驻线程数不宜太多。故空闲连接存活时间调低，连接数可以改为 CPU核心数 + 1



分库分表情况条件下：

根据每个节点的硬件配置，规划出合理的连接数





总结：调整参数

1. 常驻连接数
2. 最大连接数
3. 空闲连接存活时间
4. 等待队列容量



### 二、结构的优化

对于结构的优化，一般在项目的库表设计之初就要考虑

三方面

1. 表结构
2. 字段结构
3. 索引结构



**表结构：**

1. 表字段数量不能太多，表字段数量多，能载入内存的数据页会减少，磁盘操作数据性能过低（一个40字段的表实际频繁使用的字段并没有这么多，把不常用的字段加载占用额外内存空间）（最多30个左右字段，否则导致查询时性能明显下降）
2. 需要连表查询的字段，可以适当在一张表中冗余几个字段，减少连表查询的次数
3. 主键要选择合适，顺序递增的数值类型最好（int）
4. 实时性要求不高的数据建立中间表，然后每日定期更新中间表的数据（排名统计的表，若每次都要实时多表查询计算，带来的开销太大，可以涉及一张中间表，每天统计一次）
5. 根据业务特性选择合适的存储引擎，经常查询很少变更的表选择MyISAM（字典表，标签表），其他选择InnoDB





**字段结构：**

1. 保证足够使用的范围内，选择最小的数据类型
2. 尽量避免索引字段为NULL，尽可能使用NOT NULL关键字
3. 尽可能使用简单的类型代替复杂的类型（如ip的存储可以用int而非varchar）



**索引结构：**

1. 索引的组成尽量选择多个（联合索引）（可以节省磁盘空间，利用覆盖索引可以减少回表）
2. 长字段可以使用前缀索引
3. 索引类型选择，如常做模糊查询的字段，可以建立全文索引来代替普通索引，因为基于普通索引做like查询会导致索引失效
4. 索引结构可以调整，不做范围查询的字段可以使用hash结构代替B+Tree





### 三、参数优化

1. 调整InnoDB缓冲区
2. 调整工作线程的缓冲区（sort_buffer、read_buffer、join_buffer）
3. 调整临时表空间
4. 调整空闲线程存活时间



### 四、架构与SQL优化

1. 引入缓存中间件解决读压力
2. 引入消息中间件解决写压力
3. 主从读写分离
4. 双主双写热备份
5. 分库分表思想



### MySQL优化总结

最大收益的方案是：项目架构和数据库架构











 TopUrl: View:92 Status:1 CreateTime:1730542687 UpdateTime:1730542687}
2024-11-03T13:47:21.407+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:47:21.408+0800	INFO	service/article.go:135	req_id:f0b5bb2e-fede-4b46-aac7-5cad02df750e|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:47:45.839+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T13:47:45.851+0800	INFO	service/user.go:42	req_id:f998f05c-4a30-469f-908c-d45c6f790c93|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T13:47:45.943+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 3  0}}

2024-11-03T13:47:45.945+0800	INFO	service/article.go:135	req_id:f36a2d80-b247-4ba8-95c9-94f8c139e037|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T13:48:16.118+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 2 3  0}}

2024-11-03T13:48:16.119+0800	INFO	service/article.go:135	req_id:2bd54821-c91c-413c-ae92-de05aee1cf64|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T13:48:19.032+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:48:19.033+0800	INFO	service/article.go:135	req_id:e3aa941d-dbf6-4a22-a1b0-b656160dea89|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:58:33.994+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:58:33.995+0800	INFO	service/article.go:135	req_id:4ff532d4-2add-4dba-b0f4-977fa237b952|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T13:58:36.609+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0 0 0 0 0 1 20  0}}

2024-11-03T13:58:36.610+0800	INFO	service/article.go:135	req_id:412512e7-0e28-4179-bdb4-9351e4838555|filter article info: &{IDs:[] Title: Status:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T14:24:36.349+0800	INFO	article/admin_create.go:41	create article req:&{0xc0001e2150}

2024-11-03T14:31:12.063+0800	INFO	handlers/login.go:33	login req:&{yonghum data.password}

2024-11-03T14:31:12.118+0800	INFO	service/user.go:42	req_id:0b28a75a-abf0-4013-acbe-0a5a1876e882|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T14:31:50.803+0800	INFO	handlers/login.go:33	login req:&{yonghum data.password}

2024-11-03T14:31:50.826+0800	INFO	service/user.go:42	req_id:6a4c3305-b7c0-4f60-817e-7610d388ecf2|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T14:32:39.771+0800	INFO	handlers/login.go:33	login req:&{yonghum data.password}

2024-11-03T14:32:39.817+0800	INFO	service/user.go:42	req_id:a3a1a6f9-e34f-4310-9462-4962a548bc71|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T14:33:12.522+0800	INFO	handlers/login.go:33	login req:&{yonghum data.password}

2024-11-03T14:33:12.524+0800	INFO	service/user.go:42	req_id:cbb353b5-7a66-4a81-b830-d7efdf89116d|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T14:33:46.774+0800	INFO	handlers/login.go:33	login req:&{yonghum data.password}

2024-11-03T14:33:46.778+0800	INFO	service/user.go:42	req_id:01c9b8d3-f66f-48aa-ba22-7ea78df887ea|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T14:45:03.401+0800	INFO	article/admin_create.go:41	create article req:&{0xc0001da9a0}

2024-11-03T14:55:47.335+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T14:55:47.337+0800	INFO	service/article.go:138	req_id:5ec24bb0-0ab0-4f14-bbed-7828a4dd1a50|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T14:55:49.662+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 2 3  0}}

2024-11-03T14:55:49.663+0800	INFO	service/article.go:138	req_id:8ef46cd2-c392-4ffc-ac2d-b742b402a9c1|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T14:55:51.237+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T14:55:51.238+0800	INFO	service/article.go:138	req_id:9588645f-55fe-42a2-a9b7-2f83105e9cea|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:03:25.197+0800	INFO	article/admin_create.go:43	create article req:&{{0 1     0 0 0 0}}

2024-11-03T15:06:56.764+0800	INFO	article/admin_create.go:44	create article req:&{{0 1     0 0 0 0}}

2024-11-03T15:08:01.945+0800	INFO	article/admin_create.go:44	create article req:&{{0 1 store.state.user.token store.state.user.token store.state.user.tokenstore.state.user.tokenstore.state.user.tokenstore.state.user.token  0 0 0 0}}

2024-11-03T15:10:08.125+0800	INFO	article/admin_create.go:44	create article req:&{{0 1 store.state.user.token store.state.user.token store.state.user.tokenstore.state.user.tokenstore.state.user.tokenstore.state.user.token  0 0 0 0}}

2024-11-03T15:10:08.293+0800	INFO	service/article.go:77	req_id:a707df53-e0ad-4022-b022-d1d8fe9c0d34|added article info: &{ID:7 UserID:1 Title:store.state.user.token Brief:store.state.user.token Content:store.state.user.tokenstore.state.user.tokenstore.state.user.tokenstore.state.user.token TopUrl: View:0 Status:1 CreateTime:1730617808 UpdateTime:1730617808}
2024-11-03T15:10:16.960+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:10:16.961+0800	INFO	service/article.go:138	req_id:dee22208-7cd8-41f4-ae6e-dac0f1cbbd9f|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:10:19.591+0800	INFO	article/guest_view.go:39	view article req:&{7}

2024-11-03T15:10:19.718+0800	INFO	service/article.go:47	req_id:f0ec12ad-e4fb-4017-8c5e-a36f1afecf3b|view article info: &{ID:7 UserID:1 Title:store.state.user.token Brief:store.state.user.token Content:store.state.user.tokenstore.state.user.tokenstore.state.user.tokenstore.state.user.token TopUrl: View:1 Status:1 CreateTime:1730617808 UpdateTime:1730617808}
2024-11-03T15:10:27.421+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:10:27.422+0800	INFO	service/article.go:138	req_id:96a69132-aa81-4350-aeca-b935359cdef4|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:10:34.962+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 2 3  0}}

2024-11-03T15:10:34.964+0800	INFO	service/article.go:138	req_id:db33b9be-075a-45b1-a07c-051df469cce4|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T15:10:36.584+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:10:36.585+0800	INFO	service/article.go:138	req_id:90f9caa0-b509-4012-a70b-e276664d0b8a|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:20:25.586+0800	INFO	article/admin_create.go:44	create article req:&{{0 1  		c.Request.
		c.Request.
 		c.Request.
		c.Request.
  0 0 0 0}}

2024-11-03T15:22:20.402+0800	INFO	article/admin_create.go:44	create article req:&{{0 1 撒大苏打实打实 阿三大苏打实打实大大实打实 实打实大苏打实打实阿三大苏打实打实大苏打实打实  0 0 0 0}}

2024-11-03T15:22:20.526+0800	INFO	service/article.go:77	req_id:be84ed3a-6ffb-4c46-98e9-0a706b5af100|added article info: &{ID:8 UserID:1 Title:撒大苏打实打实 Brief:阿三大苏打实打实大大实打实 Content:实打实大苏打实打实阿三大苏打实打实大苏打实打实 TopUrl: View:0 Status:1 CreateTime:1730618540 UpdateTime:1730618540}
2024-11-03T15:22:49.686+0800	INFO	article/admin_create.go:44	create article req:&{{0 1 手动阀手动阀手动阀手动阀手动阀手动阀 手动阀手动阀手动阀手动阀手动阀手动阀 手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀  0 0 0 0}}

2024-11-03T15:22:49.803+0800	INFO	service/article.go:77	req_id:f5b67685-1a4a-40cd-8d0e-813b62abded3|added article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:0 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:25:05.892+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:25:05.893+0800	INFO	service/article.go:138	req_id:cc65d901-4c30-401b-af7d-f4eee6a02214|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:25:20.843+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T15:25:20.843+0800	INFO	service/article.go:138	req_id:61ba614b-19fb-4ad0-be63-3aee51837cdd|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T15:25:23.256+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:25:23.388+0800	INFO	service/article.go:47	req_id:2526d45a-c631-446b-9a2f-ab607dbdb142|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:1 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:26:04.315+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:26:04.447+0800	INFO	service/article.go:47	req_id:22beb21e-3006-4cb6-99f7-f70470b6aa50|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:2 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:26:08.129+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:26:08.249+0800	INFO	service/article.go:47	req_id:e2d291a3-5244-4172-ad6b-989767177fc6|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:3 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:26:22.937+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:26:23.061+0800	INFO	service/article.go:47	req_id:ce62cb88-e1ab-40fd-b8ab-40d19c0637ef|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:4 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:26:29.746+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:26:29.867+0800	INFO	service/article.go:47	req_id:904313e9-ddaf-4d8b-b75c-760ee9ea695f|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:5 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:27:14.459+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:27:14.578+0800	INFO	service/article.go:47	req_id:c1e9324c-e38f-4d17-8beb-6e40adbbf7b6|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:6 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:27:18.220+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:27:18.220+0800	INFO	service/article.go:138	req_id:b8eb33e4-aaf1-4d0d-adc9-b8a172c6b3ea|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:27:23.689+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T15:27:23.689+0800	INFO	service/article.go:138	req_id:436a1f94-e0d4-405c-85e7-1ab9515582a6|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T15:27:31.894+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:27:31.894+0800	INFO	service/article.go:138	req_id:b6d43ecf-8934-4a79-9f0a-912df0a522dc|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:27:32.704+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:27:32.840+0800	INFO	service/article.go:47	req_id:a2ee8629-36b5-4658-9110-951e8462a6c3|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:7 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:28:21.673+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:28:21.806+0800	INFO	service/article.go:47	req_id:be11f59d-bdfa-4b63-9d7b-c0d94d583434|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:8 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:28:24.705+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:28:24.705+0800	INFO	service/article.go:138	req_id:63d8b32a-04b7-4e5d-94b9-7b92656006b9|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:28:42.315+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:28:42.316+0800	INFO	service/article.go:138	req_id:59513bdb-35bf-4073-8d9a-56eb4ecf3044|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:28:45.799+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T15:28:45.799+0800	INFO	service/article.go:138	req_id:a80b924c-5dd8-4e61-88f8-a3f91a692b84|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T15:28:49.398+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:28:49.400+0800	INFO	service/article.go:138	req_id:5c86217e-a2f2-4fc4-9506-ee43ef07b779|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:28:50.328+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T15:28:50.328+0800	INFO	service/article.go:138	req_id:5889e5d4-95cb-4868-847f-4090b83d5018|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T15:28:54.075+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:28:54.075+0800	INFO	service/article.go:138	req_id:f8fac274-909b-47e0-b6d8-19c0d0cd099e|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:28:54.707+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:28:54.843+0800	INFO	service/article.go:47	req_id:58235cff-8ad1-4595-b379-a17e652822df|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:9 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:29:26.419+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:29:26.548+0800	INFO	service/article.go:47	req_id:ebb219ab-2865-4c06-9e77-c13229c9ff16|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:10 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:29:35.490+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:29:35.632+0800	INFO	service/article.go:47	req_id:a9cb6490-f693-42d0-8253-981cc9737674|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:11 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:30:08.208+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:30:08.337+0800	INFO	service/article.go:47	req_id:a0d78508-7adc-4215-8a5b-78931918b05c|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:12 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:30:12.987+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:30:12.988+0800	INFO	service/article.go:138	req_id:ff57699f-2355-4918-ba81-1fbe5705d47a|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:30:17.558+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T15:30:17.559+0800	INFO	service/article.go:138	req_id:be771b76-6afe-4988-bab3-e52b9c4cfead|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T15:30:19.452+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:30:19.452+0800	INFO	service/article.go:138	req_id:7f2f34fb-a881-4a21-a3ab-6b451522a401|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:30:27.835+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:30:27.835+0800	INFO	service/article.go:138	req_id:b8d63db6-546c-42b5-beb3-10865851d373|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:30:54.238+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:30:54.239+0800	INFO	service/article.go:138	req_id:92ec8a23-bb34-4809-9c44-698dd579889c|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:31:05.038+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:31:05.039+0800	INFO	service/article.go:138	req_id:29bf5a66-6de9-4b7d-bd90-b553bfcc3130|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:31:18.487+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:31:18.487+0800	INFO	service/article.go:138	req_id:390da7dc-b638-407d-88bd-9b0f919f423e|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:31:30.735+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:31:30.735+0800	INFO	service/article.go:138	req_id:668feada-0ac9-45a2-81d4-673cbca07aea|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:31:35.118+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:31:35.119+0800	INFO	service/article.go:138	req_id:7f166a70-baaa-4645-ad3c-e1fc8e20f3f6|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:31:38.009+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:31:38.010+0800	INFO	service/article.go:138	req_id:0e5000cf-bbe1-4739-9aae-d3e11a627884|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:31:42.793+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:31:42.794+0800	INFO	service/article.go:138	req_id:5b3166ba-6a00-4636-bbec-f31ccdb3e31b|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:32:00.432+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:32:00.433+0800	INFO	service/article.go:138	req_id:b50f8609-c092-474c-a1cb-5dfc494bc277|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:32:27.457+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:32:27.458+0800	INFO	service/article.go:138	req_id:df1cd447-a131-42ce-a999-06f9d77252ea|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:32:37.740+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T15:32:37.741+0800	INFO	service/article.go:138	req_id:feaf5fc5-348a-48c5-9d57-3338156231a8|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T15:41:13.723+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:41:13.724+0800	INFO	service/article.go:138	req_id:27a8be33-3634-4359-88c7-7933030a74af|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:43:02.592+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T15:43:02.593+0800	INFO	service/article.go:138	req_id:3bcd10a3-5865-40c1-abcf-7a9ce7358056|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T15:43:04.903+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:43:04.904+0800	INFO	service/article.go:138	req_id:f9154d89-0adb-4349-97c5-e5c684219bbf|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:43:42.498+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:43:42.499+0800	INFO	service/article.go:138	req_id:628fa7d1-c4c2-44d9-a8d9-d3cdc4e621c4|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:45:56.148+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:45:56.150+0800	INFO	service/article.go:138	req_id:03b98e59-3851-4f49-b596-76a590831a82|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:46:34.446+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:46:34.446+0800	INFO	service/article.go:138	req_id:536da4eb-0590-4059-8258-ffa6365f3ebf|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:48:24.996+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:48:25.001+0800	INFO	service/article.go:138	req_id:a65a1a2d-8e6c-4c2f-ab6f-58f73d25512e|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:48:34.764+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:48:34.764+0800	INFO	service/article.go:138	req_id:1c906924-0d96-43d5-9992-dc623c5346dc|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:48:43.327+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:48:43.327+0800	INFO	service/article.go:138	req_id:6c3c6f8c-af4b-4dc8-a010-b0986dbb4086|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:48:43.456+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:48:43.457+0800	INFO	service/article.go:138	req_id:42ad67b9-95a6-4f51-a6a6-8cb3ffb738d5|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:49:36.622+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:49:36.622+0800	INFO	service/article.go:138	req_id:ec0c9784-018f-48d7-93f7-5e30fc4adaa9|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:49:56.879+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:49:57.017+0800	INFO	service/article.go:47	req_id:adccdf13-8d0e-429c-b532-1279b941b185|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:13 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:49:57.019+0800	INFO	article/guest_view.go:39	view article req:&{9}

2024-11-03T15:49:57.152+0800	INFO	service/article.go:47	req_id:d072bb4f-f1a9-4b00-9a38-05915c316333|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:14 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T15:49:59.335+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:49:59.335+0800	INFO	service/article.go:138	req_id:087630ca-3539-4a3c-81ec-bec86d85b45c|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:50:00.472+0800	INFO	article/guest_view.go:39	view article req:&{8}

2024-11-03T15:50:00.599+0800	INFO	service/article.go:47	req_id:cd51e59e-3b42-4615-aa37-4a8636f80b20|view article info: &{ID:8 UserID:1 Title:撒大苏打实打实 Brief:阿三大苏打实打实大大实打实 Content:实打实大苏打实打实阿三大苏打实打实大苏打实打实 TopUrl: View:1 Status:1 CreateTime:1730618540 UpdateTime:1730618540}
2024-11-03T15:50:00.603+0800	INFO	article/guest_view.go:39	view article req:&{8}

2024-11-03T15:50:00.731+0800	INFO	service/article.go:47	req_id:b2fab6fe-3d8b-4402-b3e9-241ee380c958|view article info: &{ID:8 UserID:1 Title:撒大苏打实打实 Brief:阿三大苏打实打实大大实打实 Content:实打实大苏打实打实阿三大苏打实打实大苏打实打实 TopUrl: View:2 Status:1 CreateTime:1730618540 UpdateTime:1730618540}
2024-11-03T15:50:01.189+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:50:01.189+0800	INFO	service/article.go:138	req_id:bf57920b-d755-4f4a-915a-80ea08722896|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:50:02.303+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T15:50:02.431+0800	INFO	service/article.go:47	req_id:635385b9-34eb-445b-887c-aad22fbd309a|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Brief: Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:36 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T15:50:02.436+0800	INFO	article/guest_view.go:39	view article req:&{6}

2024-11-03T15:50:02.561+0800	INFO	service/article.go:47	req_id:4e1c2de2-4bf5-484b-9bf4-cee3f0a034fe|view article info: &{ID:6 UserID:1 Title:第一4篇这![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是文章1 Brief: Content:这是第一![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)篇文章的![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)内容，内容![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)是歌词：唱到自己流泪，她![zuoguai_2024-11-02_18-18-38](https://img.alowlife.com/i/2024/11/02/u46lle.png)来同我的演唱会，在四十岁后听歌的女人很美 TopUrl:https://img.alowlife.com/i/2024/11/02/u46lle.png View:37 Status:1 CreateTime:1730544200 UpdateTime:1730544200}
2024-11-03T15:50:02.988+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:50:02.990+0800	INFO	service/article.go:138	req_id:b3d342ad-499f-4ec4-8bc8-213463c2c7a8|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:50:20.689+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:50:20.690+0800	INFO	service/article.go:138	req_id:fb0f2b46-8d46-4340-a3a9-6e9a6b9ee3c3|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:50:32.339+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:50:32.340+0800	INFO	service/article.go:138	req_id:afdeda7e-236e-4d83-bcc2-83e6683c11e9|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:50:52.754+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:50:52.754+0800	INFO	service/article.go:138	req_id:8f7c3803-3430-4bae-9560-5eb93a31a9a5|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:51:02.241+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:51:02.241+0800	INFO	service/article.go:138	req_id:5b8222a5-026d-47b3-8a7d-202d2a255af3|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:51:33.702+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:51:33.703+0800	INFO	service/article.go:138	req_id:79ac00ee-eac0-466a-89b4-e03b44cc1957|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:51:41.412+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:51:41.412+0800	INFO	service/article.go:138	req_id:aa9ffc7b-f69f-460c-a976-4f2fed3b2358|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:51:53.419+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:51:53.419+0800	INFO	service/article.go:138	req_id:1c9793ad-5b88-41f1-8893-a62cfab94af1|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:52:06.503+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:52:06.504+0800	INFO	service/article.go:138	req_id:31b45623-4722-4028-9127-bfdd7859f4a0|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:52:15.624+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:52:15.624+0800	INFO	service/article.go:138	req_id:72dc5d9c-4002-4f5d-97c0-d542db0fc677|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:52:40.453+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:52:40.454+0800	INFO	service/article.go:138	req_id:ea499548-f890-484e-abae-d152dc5b87a7|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:52:53.853+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:52:53.853+0800	INFO	service/article.go:138	req_id:b2ec9f6b-e175-44b1-bfa4-51460b3bccfc|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:52:59.754+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:52:59.756+0800	INFO	service/article.go:138	req_id:39193c5a-ae99-4513-bccf-b752443fc25b|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:53:06.492+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:53:06.493+0800	INFO	service/article.go:138	req_id:0137efd6-d861-4929-a27f-68ed21599036|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:53:22.370+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:53:22.371+0800	INFO	service/article.go:138	req_id:9bd3f941-3101-4f75-aa7c-6540effa8d79|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:53:51.469+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:53:51.469+0800	INFO	service/article.go:138	req_id:5b3e3613-40c3-4112-8a19-599923ce0254|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:54:49.472+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:54:49.474+0800	INFO	service/article.go:138	req_id:28734993-c5a0-47e2-af10-ddb31ad94a83|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:54:51.120+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:54:51.120+0800	INFO	service/article.go:138	req_id:5ad3d537-6207-4763-8814-9db17ac8c91a|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:56:12.621+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:56:12.622+0800	INFO	service/article.go:138	req_id:5b1e9236-c0d8-4a60-ac2c-d8e5f4242993|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:56:35.217+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:56:35.217+0800	INFO	service/article.go:138	req_id:64eab5c1-269a-4f09-b9ab-48d73ea4ba91|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:57:08.773+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:57:08.773+0800	INFO	service/article.go:138	req_id:0317115c-ad67-4ec4-9be3-23210d02a749|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T15:57:12.439+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T15:57:12.439+0800	INFO	service/article.go:138	req_id:2a4f1284-bf24-438f-80d8-79ab99b57380|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:10:38.296+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:10:38.298+0800	INFO	service/article.go:138	req_id:3be981f4-e832-47a6-affa-16055c082f01|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:10:44.104+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:10:44.104+0800	INFO	service/article.go:138	req_id:fa2a3112-67cd-4f18-b9c8-ea8c6e243cf3|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:10:57.695+0800	INFO	handlers/login.go:33	login req:&{作怪 123456}

2024-11-03T16:10:57.699+0800	INFO	service/user.go:42	req_id:de24500c-234f-417a-aa6e-664e04c2b1b2|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:11:59.387+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:11:59.426+0800	INFO	service/user.go:42	req_id:d502eb75-9597-46cf-8b3a-1b5aaf11fb6f|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:13:28.632+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:13:28.642+0800	INFO	service/user.go:42	req_id:4826ada8-b16d-4e5b-8cdc-1056c4ac4330|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:13:52.884+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:13:52.892+0800	INFO	service/user.go:42	req_id:6a0e7792-dd65-4db3-aeb6-b3c8cd34fec0|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:14:28.387+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:14:28.397+0800	INFO	service/user.go:42	req_id:1a26a295-4b62-48b1-a22f-aa8a481f829f|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:14:33.165+0800	INFO	handlers/login.go:33	login req:&{作怪 zuoguai123456}

2024-11-03T16:14:33.171+0800	INFO	service/user.go:42	req_id:ce0f4ce1-3832-4adb-addc-0bb8f8c5a950|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:14:39.146+0800	INFO	handlers/login.go:33	login req:&{作怪 123456}

2024-11-03T16:14:39.150+0800	INFO	service/user.go:42	req_id:897de414-6deb-4c9c-8434-7666a5838afc|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:14:44.753+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:14:44.761+0800	INFO	service/user.go:42	req_id:2d268a87-9a24-494e-a3d0-8ec7000c44de|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:14:48.227+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:14:48.231+0800	INFO	service/user.go:42	req_id:557c41ad-d367-4624-8763-9d5dddc6f4a8|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:15:20.029+0800	INFO	handlers/login.go:33	login req:&{作怪 zuoguai123456}

2024-11-03T16:15:20.033+0800	INFO	service/user.go:42	req_id:0e80e168-5ba5-41dd-8ad8-93c16173900f|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:16:53.915+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:16:53.920+0800	INFO	service/user.go:42	req_id:7b5bc8a0-1c24-46ed-86d3-8fb2d7553a8a|user info: &{ID:1 Username:zuoguai Password:$2a$10$fAtka2FaCGv9jpxXMb75cu/tN3eobxeCejzp9jTzXVhf.sxvgQwXq}
2024-11-03T16:17:23.463+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:17:23.485+0800	INFO	service/user.go:42	req_id:5fd22002-2249-498b-8992-93dfbeebd9bf|user info: zuoguai
2024-11-03T16:17:26.888+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:17:26.893+0800	INFO	service/user.go:42	req_id:a38c1794-66ff-48a5-be70-8dfdbc26617e|user info: zuoguai
2024-11-03T16:17:27.583+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:17:27.588+0800	INFO	service/user.go:42	req_id:9c05cd93-eea0-433f-a754-63360cb40439|user info: zuoguai
2024-11-03T16:17:28.190+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:17:28.196+0800	INFO	service/user.go:42	req_id:d165ef0e-3c3c-4b65-aa7d-ca31ba779949|user info: zuoguai
2024-11-03T16:19:16.183+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:19:16.219+0800	INFO	service/user.go:42	req_id:0b66494d-d6db-4790-90f5-eedc5af60967|user info: zuoguai
2024-11-03T16:19:18.796+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:19:18.803+0800	INFO	service/user.go:42	req_id:54d26a0d-47ff-46aa-9030-102ec3cb3631|user info: zuoguai
2024-11-03T16:20:32.132+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:20:32.147+0800	INFO	service/user.go:42	req_id:25aa422b-4621-4c11-8989-5427042f652f|user info: zuoguai
2024-11-03T16:20:32.988+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:20:32.992+0800	INFO	service/user.go:42	req_id:e959d52b-96e9-449b-ab78-c99594e01f86|user info: zuoguai
2024-11-03T16:20:38.789+0800	INFO	handlers/login.go:33	login req:&{作怪 zuoguai123456}

2024-11-03T16:20:38.791+0800	INFO	service/user.go:42	req_id:b4cf891a-9663-4cd3-ac95-c112b2d84e65|user info: zuoguai
2024-11-03T16:21:21.895+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:21:21.900+0800	INFO	service/user.go:42	req_id:5e3fde48-f4ae-4388-8bb9-91a024d332e0|user info: zuoguai
2024-11-03T16:22:06.301+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:22:06.301+0800	INFO	service/article.go:138	req_id:ab5fc3d1-20e9-4994-8ed4-f40132e2ee65|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:22:18.623+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:22:18.624+0800	INFO	service/article.go:138	req_id:0e36ced5-c43a-410a-aaff-8b7832156998|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:22:28.637+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:22:28.637+0800	INFO	service/article.go:138	req_id:1836b580-0f87-4b1a-95a7-224aae480008|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:26:49.442+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:26:49.443+0800	INFO	service/article.go:138	req_id:b909bedd-2611-44c6-9165-360992af1d52|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:28:04.681+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:28:04.694+0800	INFO	service/article.go:138	req_id:3504ef8b-5641-4e10-897c-a549b57246aa|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:28:10.755+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 2 3  0}}

2024-11-03T16:28:10.756+0800	INFO	service/article.go:138	req_id:239ee0ce-fd59-4084-bd17-8d58ca305328|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T16:28:12.875+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:28:12.875+0800	INFO	service/article.go:138	req_id:4d1c2159-9de6-46f4-b191-d6a61c87a393|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:28:39.525+0800	INFO	handlers/login.go:33	login req:&{zuoguai 123456}

2024-11-03T16:28:39.532+0800	INFO	service/user.go:42	req_id:95c75253-9645-4b38-8fbb-d14c51ae42e9|user info: zuoguai
2024-11-03T16:28:39.651+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:28:39.651+0800	INFO	service/article.go:138	req_id:4f7f5612-bf0a-49ee-9d58-0edb3d6a91ba|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:32:35.514+0800	INFO	article/admin_create.go:44	create article req:&{{0 1 碎片时间的充电资料dfs fsdfsdfsdfsdf sfsfsfsdfsdfsdfsdfsdf  0 0 0 0}}

2024-11-03T16:32:35.655+0800	INFO	service/article.go:77	req_id:a5872ff2-18cc-48af-873b-a37127e550e8|added article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:0 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:36:29.105+0800	INFO	article/admin_create.go:44	create article req:&{{0 1 碎片时间的充电资料fsd sdfsdfsdfsdfsdfsdf sdfsdfsdfsdfsdfsdfsdfsdfs  0 0 0 0}}

2024-11-03T16:36:29.216+0800	INFO	service/article.go:77	req_id:f5d2afda-511a-439f-b263-374a9d415c6d|added article info: &{ID:11 UserID:1 Title:碎片时间的充电资料fsd Brief:sdfsdfsdfsdfsdfsdf Content:sdfsdfsdfsdfsdfsdfsdfsdfs TopUrl: View:0 Status:1 CreateTime:1730622989 UpdateTime:1730622989}
2024-11-03T16:37:28.425+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T16:37:28.426+0800	INFO	service/article.go:138	req_id:1b0f9763-7e9f-4f1c-b72c-cbce2df07751|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:38:05.808+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T16:38:05.809+0800	INFO	service/article.go:138	req_id:ae7d6e33-9934-434f-b6c0-67ba037837fb|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:38:12.077+0800	INFO	article/admin_del.go:38	del article req:&{11}

2024-11-03T16:38:12.080+0800	INFO	service/article.go:96	req_id:a9736bfb-19d5-4134-939f-920865c2aef8|delete article info: &{ID:11 UserID:1 Title:碎片时间的充电资料fsd Brief:sdfsdfsdfsdfsdfsdf Content:sdfsdfsdfsdfsdfsdfsdfsdfs TopUrl: View:0 Status:3 CreateTime:1730622989 UpdateTime:1730623092}
2024-11-03T16:38:13.611+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T16:38:13.612+0800	INFO	service/article.go:138	req_id:1ae33c12-663b-477c-ab7b-90c86d0a6d44|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:38:37.416+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:38:37.417+0800	INFO	service/article.go:138	req_id:c198dd05-dc4c-448a-820e-676aa36dfbb2|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:38:41.258+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T16:38:41.259+0800	INFO	service/article.go:138	req_id:0403090d-3fb8-4d8c-a270-6eb549a285e7|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:39:12.168+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T16:39:12.169+0800	INFO	service/article.go:138	req_id:eb791169-fd7d-404d-8bfa-15abe11e54da|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:39:25.903+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T16:39:25.904+0800	INFO	service/article.go:138	req_id:fffc4166-5463-484d-ab0e-dde14df97b3c|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:39:28.763+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:39:28.873+0800	INFO	service/article.go:47	req_id:985c132e-3fcc-4b82-aafb-8398a6aaacbf|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:1 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:46:26.311+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:46:26.471+0800	INFO	service/article.go:47	req_id:81e25d43-af9a-4cd5-bd86-941fb7ab2ae1|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:2 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:46:39.388+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T16:46:39.388+0800	INFO	service/article.go:138	req_id:72c59f25-897a-4d56-8cbd-ac8e09e59342|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:46:41.648+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:46:41.783+0800	INFO	service/article.go:47	req_id:d00e79d7-3c39-4195-9d1e-bfee36b2bc63|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:3 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:47:10.561+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:47:10.672+0800	INFO	service/article.go:47	req_id:0f0dbbd9-7ccc-4073-b792-dc4b4d623358|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:4 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:47:16.006+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:47:16.007+0800	INFO	service/article.go:138	req_id:1f8136e0-b2fc-4403-9235-dd9b49a80385|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:47:21.987+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T16:47:21.988+0800	INFO	service/article.go:138	req_id:d640c726-0d8f-4135-865f-34737a6abef9|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:47:23.483+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:47:23.607+0800	INFO	service/article.go:47	req_id:62c99ab5-d20d-4664-9b2b-0b073ac5f60b|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:5 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:50:42.800+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:50:42.920+0800	INFO	service/article.go:47	req_id:d7a8ce6b-153f-4239-b8be-2ccece835cad|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:6 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:50:53.507+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:50:53.631+0800	INFO	service/article.go:47	req_id:34d92e1b-9af9-42c7-ab8b-a03c07be8209|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:7 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:53:45.779+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:53:45.971+0800	INFO	service/article.go:47	req_id:5f68c0f3-3ecf-4ee6-be28-3d94e5198584|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:8 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:53:49.901+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T16:53:49.901+0800	INFO	service/article.go:138	req_id:d9022b72-c2df-49a1-8e41-219df554804d|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T16:53:54.611+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T16:53:54.613+0800	INFO	service/article.go:138	req_id:cdaf69b3-9d9f-4b62-adf7-ac30948bae14|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T16:53:55.813+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:53:55.928+0800	INFO	service/article.go:47	req_id:a6e0535f-0172-4034-b12a-b2ac8ca2146c|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:9 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T16:56:05.460+0800	INFO	article/guest_view.go:39	view article req:&{10}

2024-11-03T16:56:05.581+0800	INFO	service/article.go:47	req_id:d3d9a7a2-a74e-4740-8f8c-e2d0eb4c8111|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:10 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T17:00:04.083+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:00:04.223+0800	INFO	service/article.go:46	req_id:c6866cc0-bcd9-4cd0-85d3-af66287485ca|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdf TopUrl: View:11 Status:1 CreateTime:1730622755 UpdateTime:1730622755}
2024-11-03T17:00:21.866+0800	INFO	article/admin_modify.go:38	update article req:&{{10 0 碎片时间的充电资料dfs fsdfsdfsdfsdf sfsfsfsdfsdfsdfsdfsdfs  0 0 0 0}}

2024-11-03T17:00:21.982+0800	INFO	service/article.go:128	req_id:d7fe3a6c-6d83-4485-8453-9188a2735b1f|update article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdfs TopUrl: View:11 Status:1 CreateTime:1730622755 UpdateTime:1730624421}
2024-11-03T17:00:29.857+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:00:29.857+0800	INFO	service/article.go:137	req_id:b36b531d-d710-41f7-a272-3c2e6f51e8a2|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:00:31.923+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:00:32.029+0800	INFO	service/article.go:46	req_id:21e16bb6-7f36-4a4f-9cb3-e06fa6c99857|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdfs TopUrl: View:12 Status:1 CreateTime:1730622755 UpdateTime:1730624421}
2024-11-03T17:00:35.150+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:00:35.152+0800	INFO	service/article.go:137	req_id:a7b350f6-e9b8-4df7-b68d-cd5eb73b1ab4|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:00:36.627+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:00:36.747+0800	INFO	service/article.go:46	req_id:b5973d22-952d-4bf4-9a03-6969e5d5c245|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs Brief:fsdfsdfsdfsdf Content:sfsfsfsdfsdfsdfsdfsdfs TopUrl: View:13 Status:1 CreateTime:1730622755 UpdateTime:1730624421}
2024-11-03T17:00:55.789+0800	INFO	article/admin_modify.go:38	update article req:&{{10 0 碎片时间的充电资料dfs终极无敌 fsdfsdfsdfsdf无敌 sfsfsfsdf无敌sdfsdfsdfsdfs  0 0 0 0}}

2024-11-03T17:00:55.930+0800	INFO	service/article.go:128	req_id:dabc5ac5-e204-4882-b733-d1ecfb63b9fb|update article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfsdf无敌sdfsdfsdfsdfs TopUrl: View:13 Status:1 CreateTime:1730622755 UpdateTime:1730624455}
2024-11-03T17:01:06.604+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:01:06.604+0800	INFO	service/article.go:137	req_id:151dba3c-a416-452b-8fa1-3630333fe724|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:01:07.607+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:01:07.728+0800	INFO	service/article.go:46	req_id:909c37c9-2508-42c0-bd68-2c52874d776e|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfsdf无敌sdfsdfsdfsdfs TopUrl: View:14 Status:1 CreateTime:1730622755 UpdateTime:1730624455}
2024-11-03T17:01:09.610+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:01:09.610+0800	INFO	service/article.go:137	req_id:f1e82f49-69f2-4fcf-afe8-48082c3f8519|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:01:48.024+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 2 3  0}}

2024-11-03T17:01:48.024+0800	INFO	service/article.go:137	req_id:30c8ac13-74f3-4b9f-8448-c866c15b9c64|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:2 Size:3 SortField: Sort:0}
2024-11-03T17:01:50.365+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:01:50.366+0800	INFO	service/article.go:137	req_id:dbd7b3d6-d5f4-4149-8449-5065dde2c4cf|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:02:07.833+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:02:07.950+0800	INFO	service/article.go:46	req_id:2c98a529-b9b0-4eb8-9d36-b3600d8b4a41|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfsdf无敌sdfsdfsdfsdfs TopUrl: View:15 Status:1 CreateTime:1730622755 UpdateTime:1730624455}
2024-11-03T17:02:10.558+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:02:10.559+0800	INFO	service/article.go:137	req_id:707c4874-63dc-4255-86a5-e5ba3ba804b3|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:02:21.278+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:02:21.278+0800	INFO	service/article.go:137	req_id:bc2f1cea-ec83-4b86-8f57-04a21c4b2073|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:04:24.864+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:04:24.985+0800	INFO	service/article.go:46	req_id:74e1bfdc-c2f6-41a7-9c48-8cbb915c6754|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfsdf无敌sdfsdfsdfsdfs TopUrl: View:16 Status:1 CreateTime:1730622755 UpdateTime:1730624455}
2024-11-03T17:04:42.050+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:04:42.177+0800	INFO	service/article.go:46	req_id:9efeae04-4229-4115-be02-b3b7b795f702|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfsdf无敌sdfsdfsdfsdfs TopUrl: View:17 Status:1 CreateTime:1730622755 UpdateTime:1730624455}
2024-11-03T17:04:46.130+0800	INFO	article/admin_modify.go:38	update article req:&{{10 0 碎片时间的充电资料dfs终极无敌 fsdfsdfsdfsdf无敌 sfsfsfsdf无敌s是dfsdfsdfsdfs  0 0 0 0}}

2024-11-03T17:04:46.248+0800	INFO	service/article.go:128	req_id:60d442cf-8bca-4de1-9bb7-d0e0542ee4a0|update article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfsdf无敌s是dfsdfsdfsdfs TopUrl: View:17 Status:1 CreateTime:1730622755 UpdateTime:1730624686}
2024-11-03T17:04:46.272+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:04:46.423+0800	INFO	service/article.go:46	req_id:afa2bce4-5f50-4a98-b551-73106ee744e7|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfsdf无敌s是dfsdfsdfsdfs TopUrl: View:18 Status:1 CreateTime:1730622755 UpdateTime:1730624686}
2024-11-03T17:05:07.617+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:05:07.618+0800	INFO	service/article.go:137	req_id:825ecd1c-2dab-410f-ad9b-937e5a2423e2|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:05:09.125+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:05:09.247+0800	INFO	service/article.go:46	req_id:eec22a4a-8e97-4c2c-8ffc-dc02c434d843|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfsdf无敌s是dfsdfsdfsdfs TopUrl: View:19 Status:1 CreateTime:1730622755 UpdateTime:1730624686}
2024-11-03T17:05:13.184+0800	INFO	article/admin_modify.go:38	update article req:&{{10 0 碎片时间的充电资料dfs终极无敌 fsdfsdfsdfsdf无敌 sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs  0 0 0 0}}

2024-11-03T17:05:13.312+0800	INFO	service/article.go:128	req_id:a2425fd5-0e16-4010-a6ce-2754d5cb1eeb|update article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:19 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:05:14.496+0800	INFO	article/guest_view.go:38	view article req:&{10}

2024-11-03T17:05:14.608+0800	INFO	service/article.go:46	req_id:c18abbd9-1666-4a5d-9cb8-6aa562b2b63c|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:20 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:05:15.940+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:05:15.941+0800	INFO	service/article.go:137	req_id:e11a59ba-f688-4b4d-9481-16101c87ae6c|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:07:11.480+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:07:11.500+0800	INFO	service/article.go:137	req_id:dfc695dd-b901-4cf7-955b-a9808b7b0cb7|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:07:13.536+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:07:13.537+0800	INFO	service/article.go:137	req_id:e13e9387-b046-46ff-bca0-45b9840451b2|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:07:27.372+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:07:27.373+0800	INFO	service/article.go:137	req_id:067e6b86-a44e-4da9-b261-f16343e611e3|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:07:32.366+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:07:32.366+0800	INFO	service/article.go:137	req_id:c529bbfc-be44-4c35-85bd-97c9c1cbe41d|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:07:37.931+0800	INFO	article/guest_list.go:38	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:07:37.931+0800	INFO	service/article.go:137	req_id:4f42d819-b9f5-4271-b5e8-463bd3d50660|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:17:09.810+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:17:09.833+0800	INFO	service/article.go:138	req_id:7c23196d-9957-42ee-a5ba-694914705d57|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:17:11.346+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:17:11.479+0800	INFO	service/article.go:48	req_id:19c0f618-73fd-4c73-887b-9eee63c1d1d8|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:21 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:17:13.880+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:17:13.881+0800	INFO	service/article.go:138	req_id:a1716c42-1744-40d6-8705-a6d34c48bf84|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:17:14.491+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:17:14.633+0800	INFO	service/article.go:48	req_id:34fcc528-3d54-4b0d-bced-c3abc8bec37c|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:22 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:17:16.321+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:17:16.322+0800	INFO	service/article.go:138	req_id:8d8c6ae0-17bd-4180-a1cb-f0a714c513b9|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:17:16.966+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:17:17.092+0800	INFO	service/article.go:48	req_id:e7bb4047-ff77-422d-bfc2-ff28a05a17fe|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:23 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:17:33.526+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:17:33.638+0800	INFO	service/article.go:48	req_id:3a799d02-d735-4d60-82b3-f0f063f84256|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:24 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:17:35.059+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:17:35.059+0800	INFO	service/article.go:138	req_id:3485721b-cba3-451b-90d8-6c6574fe38ed|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:17:37.104+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:17:37.217+0800	INFO	service/article.go:48	req_id:fe6a4841-1cc6-4d12-a10f-1398805d9f08|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:15 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T17:17:39.863+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:17:39.864+0800	INFO	service/article.go:138	req_id:0b54e914-e30a-40e1-8810-32d15a67a4a0|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:17:40.601+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:17:40.713+0800	INFO	service/article.go:48	req_id:c7c65fbf-0646-4f68-b6aa-303eb7404d7f|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T17:17:42.233+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:17:42.233+0800	INFO	service/article.go:138	req_id:f3836ea0-74f7-435a-8385-6784ae0fb0d5|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:17:42.920+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:17:43.045+0800	INFO	service/article.go:48	req_id:28e555b0-b378-4060-a758-835deeeb3e98|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:25 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:17:45.914+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:17:45.915+0800	INFO	service/article.go:138	req_id:086be611-e42c-4536-8592-053465174533|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:17:46.599+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:17:46.734+0800	INFO	service/article.go:48	req_id:fa315b60-d4a4-4099-b1da-7d9ae536f1d1|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:17:49.247+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:17:49.247+0800	INFO	service/article.go:138	req_id:5ebb7323-fd7a-490c-bb4f-d347567a5b19|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:19:35.793+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:19:35.793+0800	INFO	service/article.go:138	req_id:890863e3-d3c7-484b-b91b-80d19678cbf0|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:19:35.860+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:19:35.861+0800	INFO	service/article.go:138	req_id:b2810b3d-96d8-40c7-ae6a-10f4bf240942|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:19:53.071+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:19:53.071+0800	INFO	service/article.go:138	req_id:45147edd-cdd8-4f67-b18b-18a1fc053510|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:19:55.676+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:19:55.683+0800	INFO	service/article.go:48	req_id:9409869a-b04f-4dfd-bd07-0871df546df0|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:19:57.630+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:19:57.630+0800	INFO	service/article.go:138	req_id:877e96f3-84f7-4986-bf39-59c8e2edb617|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:19:58.176+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:19:58.179+0800	INFO	service/article.go:48	req_id:84485ac6-2397-422b-a7ac-15eb37955ee5|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:19:59.312+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:19:59.312+0800	INFO	service/article.go:138	req_id:2afd9121-ae10-4305-bae8-a0386e23667e|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:20:00.056+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:20:00.062+0800	INFO	service/article.go:48	req_id:aa6472e4-7a1f-4388-ba17-bc9e862bf9c0|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T17:20:01.819+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:20:01.819+0800	INFO	service/article.go:138	req_id:09e5c536-7b3e-4cd5-b8c0-0ad6ab372662|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:20:02.582+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:20:02.592+0800	INFO	service/article.go:48	req_id:a01e170e-07eb-4258-b42a-29ffbea82f6f|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T17:20:04.176+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:20:04.176+0800	INFO	service/article.go:138	req_id:9507b92e-069f-4f03-a38c-ed2221aba48b|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:20:04.855+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:20:04.863+0800	INFO	service/article.go:48	req_id:61fe9691-58ba-41b7-9236-d6824507402a|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T17:20:06.542+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:20:06.542+0800	INFO	service/article.go:138	req_id:9a6b2bf5-05fa-4390-a01b-e7e69a2d23ca|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:20:07.223+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:20:07.232+0800	INFO	service/article.go:48	req_id:1b903941-0d71-4453-adf9-7234d2059fae|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T17:20:08.948+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:20:08.949+0800	INFO	service/article.go:138	req_id:fc456fcd-134b-4be9-a580-ac2681297462|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:20:09.716+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:20:09.723+0800	INFO	service/article.go:48	req_id:816e551f-c601-4348-8195-eb00ce5ec95d|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T17:20:11.241+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:20:11.242+0800	INFO	service/article.go:138	req_id:99132688-9c3f-43cf-88d9-449712d0eab6|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:20:11.925+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:20:11.932+0800	INFO	service/article.go:48	req_id:7d6619e7-4e7c-4ce2-a134-2b6644a8f577|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730618569}
2024-11-03T17:20:13.079+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:20:13.080+0800	INFO	service/article.go:138	req_id:48fd6d15-5cc5-4d8a-b363-0dbb5a177d9a|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:20:13.985+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:20:13.994+0800	INFO	service/article.go:48	req_id:0b4c585b-96c5-46bb-b002-8ab5c8b51921|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:20:15.402+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:20:15.403+0800	INFO	service/article.go:138	req_id:f6e2f6bb-3818-4497-a44c-5b5d0af7f186|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:20:15.875+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:20:15.882+0800	INFO	service/article.go:48	req_id:aef1e579-8b42-4201-b9cb-37a62e30beb6|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:20:17.016+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:20:17.016+0800	INFO	service/article.go:138	req_id:45624fdb-fbbe-408f-886d-c151401a3384|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:24:42.771+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:24:42.772+0800	INFO	service/article.go:138	req_id:38cef0b0-753e-4143-b2ef-7080d88abfd4|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:24:44.125+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:24:44.125+0800	INFO	service/article.go:138	req_id:08ab97ba-5548-4ed1-8d7c-e4701e89e636|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:26:14.595+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:26:14.596+0800	INFO	service/article.go:138	req_id:70eeadcc-bf65-4c7e-88a9-7bb20bbdd4ee|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:30:22.385+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:30:22.385+0800	INFO	service/article.go:138	req_id:cc154a12-1cbe-4fe4-b864-0cf462eb21cb|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:30:38.952+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:30:38.953+0800	INFO	service/article.go:138	req_id:af8cd2e1-a1a1-4452-8f3c-7f705ef5cbce|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:30:39.916+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:30:39.916+0800	INFO	service/article.go:138	req_id:50faf807-0a2d-47f6-93f6-7cc6da1cc576|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:33:05.370+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:33:05.370+0800	INFO	service/article.go:138	req_id:2b390c5b-23c2-41d5-9037-14a51123fcc2|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:34:40.475+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:34:40.475+0800	INFO	service/article.go:138	req_id:63e7e893-e3de-4ddb-af34-cf6444cef40e|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:35:28.535+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:35:28.536+0800	INFO	service/article.go:138	req_id:6c7bfb1e-e3b6-42fe-a54b-b219113fdca2|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:35:32.039+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:35:32.039+0800	INFO	service/article.go:138	req_id:7beac6b4-5d35-4e8d-99e8-b4e089c329a8|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:35:34.051+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:35:34.060+0800	INFO	service/article.go:48	req_id:b710626d-ebb3-4d56-974e-8b5060880455|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:35:34.091+0800	INFO	article/guest_view.go:40	view article req:&{10}

2024-11-03T17:35:34.113+0800	INFO	service/article.go:48	req_id:deb788d9-8767-44d9-83d6-347cf3275eba|view article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:1 CreateTime:1730622755 UpdateTime:1730624713}
2024-11-03T17:35:35.369+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:35:35.369+0800	INFO	service/article.go:138	req_id:06d463f5-526a-4d84-a9b7-8c28298463d3|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:37:00.382+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:37:00.382+0800	INFO	service/article.go:138	req_id:fdd51a36-1e26-45d0-bcbe-04fe9ea207b8|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:37:00.519+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:37:00.520+0800	INFO	service/article.go:138	req_id:86a6e83e-647c-4bd6-9ef3-6985be77fd99|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:37:00.596+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:37:00.596+0800	INFO	service/article.go:138	req_id:4ee7eac4-09d6-49dc-b11c-6b20d6144fc6|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:37:00.687+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:37:00.687+0800	INFO	service/article.go:138	req_id:514bd593-9956-4cea-92aa-0884c6924478|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:37:33.200+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:37:33.200+0800	INFO	service/article.go:138	req_id:5b5756cc-7739-4e9b-b017-909a8122a25e|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:42:44.161+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:42:44.161+0800	INFO	service/article.go:138	req_id:33f7e2a5-2388-4947-85ee-b8aa69abd606|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:43:37.639+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:43:37.639+0800	INFO	service/article.go:138	req_id:424aee11-28ba-4303-9562-f8b3becfc008|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:43:40.586+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 10  0}}

2024-11-03T17:43:40.586+0800	INFO	service/article.go:138	req_id:a9fb1434-0461-4b22-8276-ec91f1172a92|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:45:10.992+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:45:10.992+0800	INFO	service/article.go:138	req_id:425ff1b8-3be3-409b-9672-d6212a809ce3|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:45:18.612+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:45:18.612+0800	INFO	service/article.go:138	req_id:21bee9b9-2fc6-4ed8-9b59-818a89e4c495|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:45:51.760+0800	INFO	article/admin_del.go:38	del article req:&{10}

2024-11-03T17:45:51.768+0800	INFO	service/article.go:96	req_id:f76a355d-279d-4cfa-b06e-1bace5ef6e57|delete article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:3 CreateTime:1730622755 UpdateTime:1730627151}
2024-11-03T17:45:54.021+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:45:54.022+0800	INFO	service/article.go:138	req_id:e6a29d34-a11c-420d-ba3f-1088772b1d63|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:45:57.540+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:45:57.540+0800	INFO	service/article.go:138	req_id:6fa69741-a7c5-4ec4-a608-663e221469f4|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:47:13.770+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:47:13.770+0800	INFO	service/article.go:138	req_id:7220c4b3-4727-45bf-b3d2-2501713d4b8e|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:47:15.214+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:47:15.215+0800	INFO	service/article.go:138	req_id:e1ea5392-c099-4ce5-b8bd-f7a7afbdc90d|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:47:16.401+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:47:16.402+0800	INFO	service/article.go:138	req_id:789613e8-e174-4fb3-8f57-11d8fdeb0b72|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:48:14.445+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:48:14.445+0800	INFO	service/article.go:138	req_id:d7222507-137b-4dd7-83a0-e6070f13181c|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:48:18.534+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:48:18.534+0800	INFO	service/article.go:138	req_id:96840679-9d99-4fc2-9483-598331b760b1|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:48:31.550+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:48:31.550+0800	INFO	service/article.go:138	req_id:be64a2b2-5a14-4c5a-800c-5603e2f11416|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:48:33.827+0800	INFO	article/admin_modify.go:38	update article req:&{{11 0     0 2 0 0}}

2024-11-03T17:48:33.934+0800	INFO	service/article.go:129	req_id:4eaf7e4d-a037-4a1d-8135-c022dd526b35|update article info: &{ID:11 UserID:1 Title:碎片时间的充电资料fsd Brief:sdfsdfsdfsdfsdfsdf Content:sdfsdfsdfsdfsdfsdfsdfsdfs TopUrl: View:0 Status:2 CreateTime:1730622989 UpdateTime:1730627313}
2024-11-03T17:49:12.780+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:49:12.781+0800	INFO	service/article.go:138	req_id:7c02b11b-9110-4095-b434-49f4288ef2ed|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:49:28.444+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:49:28.445+0800	INFO	service/article.go:138	req_id:3ac196b4-e0bc-4164-8c56-0ceba21646a9|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:49:31.488+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:49:31.488+0800	INFO	service/article.go:138	req_id:97c3df31-2d13-4aef-b359-76b930c0e802|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:49:33.662+0800	INFO	article/admin_modify.go:38	update article req:&{{10 0     0 2 0 0}}

2024-11-03T17:49:33.770+0800	INFO	service/article.go:129	req_id:2f284866-4bb0-4790-ae07-44619cd71bfd|update article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:2 CreateTime:1730622755 UpdateTime:1730627373}
2024-11-03T17:49:37.006+0800	INFO	article/admin_modify.go:38	update article req:&{{10 0     0 2 0 0}}

2024-11-03T17:49:37.112+0800	INFO	service/article.go:129	req_id:fe286f63-fe46-4c24-9ca8-e05d03d22c15|update article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:2 CreateTime:1730622755 UpdateTime:1730627377}
2024-11-03T17:49:42.927+0800	INFO	article/admin_modify.go:38	update article req:&{{10 0     0 2 0 0}}

2024-11-03T17:49:43.031+0800	INFO	service/article.go:129	req_id:cee12927-71e2-4728-81ed-cc45b52af272|update article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:2 CreateTime:1730622755 UpdateTime:1730627382}
2024-11-03T17:50:09.933+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:50:09.934+0800	INFO	service/article.go:138	req_id:110064cb-c314-40c5-b447-78c29e566f22|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:50:47.514+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:50:47.514+0800	INFO	service/article.go:138	req_id:e6b9daf1-525a-434a-a9e7-ff586686cec4|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:50:49.695+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:50:49.695+0800	INFO	service/article.go:138	req_id:de3ee7b5-dbfa-4232-9ff2-381a32cfb978|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:50:51.749+0800	INFO	article/admin_modify.go:38	update article req:&{{9 0     0 2 0 0}}

2024-11-03T17:50:51.855+0800	INFO	service/article.go:129	req_id:aee9b7c9-da86-4bb8-a5f1-9d4ea2932760|update article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:2 CreateTime:1730618569 UpdateTime:1730627451}
2024-11-03T17:51:02.500+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:51:02.500+0800	INFO	service/article.go:138	req_id:4c7d1289-b245-4a02-b732-64a71e87a6f9|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:51:09.163+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:51:09.163+0800	INFO	service/article.go:138	req_id:8a9d244e-f106-4a05-8e15-0ac0bebb01f5|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:51:49.253+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:51:49.253+0800	INFO	service/article.go:138	req_id:d254cdf0-3645-4c99-9402-278aa6f6fc0d|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:52:18.365+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:52:18.365+0800	INFO	service/article.go:138	req_id:516902ef-8dc4-4e0f-9829-e001fbcfa9fa|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:52:22.181+0800	INFO	article/admin_del.go:38	del article req:&{11}

2024-11-03T17:52:22.184+0800	INFO	service/article.go:96	req_id:fed6d5e3-fcb3-42ac-8e22-afc4c97c9e2d|delete article info: &{ID:11 UserID:1 Title:碎片时间的充电资料fsd Brief:sdfsdfsdfsdfsdfsdf Content:sdfsdfsdfsdfsdfsdfsdfsdfs TopUrl: View:0 Status:3 CreateTime:1730622989 UpdateTime:1730627542}
2024-11-03T17:52:42.647+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:52:42.647+0800	INFO	service/article.go:138	req_id:ed2da77e-64b9-4b71-9d33-02f960b710fc|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:52:47.002+0800	INFO	article/admin_del.go:38	del article req:&{10}

2024-11-03T17:52:47.005+0800	INFO	service/article.go:96	req_id:40f4dae2-d411-48bf-a186-fa550045503b|delete article info: &{ID:10 UserID:1 Title:碎片时间的充电资料dfs终极无敌 Brief:fsdfsdfsdfsdf无敌 Content:sfsfsfs看加哦加哦df无敌s是dfsdfsdfsdfs TopUrl: View:26 Status:3 CreateTime:1730622755 UpdateTime:1730627567}
2024-11-03T17:52:47.796+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:52:47.796+0800	INFO	service/article.go:138	req_id:d653304a-a3d4-4c9d-8b99-551d33b317dd|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:52:49.999+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:52:49.999+0800	INFO	service/article.go:138	req_id:5a8204be-de47-4701-92ba-b8af3a62cf2b|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:52:52.107+0800	INFO	article/admin_modify.go:38	update article req:&{{8 0     0 2 0 0}}

2024-11-03T17:52:52.220+0800	INFO	service/article.go:129	req_id:f8d3fee7-b20a-48e1-85d7-743a026462fa|update article info: &{ID:8 UserID:1 Title:撒大苏打实打实 Brief:阿三大苏打实打实大大实打实 Content:实打实大苏打实打实阿三大苏打实打实大苏打实打实 TopUrl: View:2 Status:2 CreateTime:1730618540 UpdateTime:1730627572}
2024-11-03T17:53:23.117+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:53:23.117+0800	INFO	service/article.go:138	req_id:eb26846f-12f0-4fea-8565-c67fb992c1bc|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:53:25.110+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:53:25.110+0800	INFO	service/article.go:138	req_id:7d7d3553-bf13-4c62-9301-4c365fa995de|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:54:56.383+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:54:56.383+0800	INFO	service/article.go:138	req_id:bcfcc7c1-c2e7-433f-8c95-696a153e536e|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:55:09.400+0800	INFO	article/admin_modify.go:38	update article req:&{{9 0     0 1 0 0}}

2024-11-03T17:55:09.513+0800	INFO	service/article.go:129	req_id:1298a0ce-fd84-4a38-8a31-bf4679289169|update article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730627709}
2024-11-03T17:55:11.400+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:55:11.403+0800	INFO	service/article.go:48	req_id:074a89b2-7708-4edb-b4b2-ac08a569ebdb|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730627709}
2024-11-03T17:55:20.023+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:55:20.023+0800	INFO	service/article.go:138	req_id:fdf765a1-ce17-449c-8713-25cbce0732dc|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:55:20.525+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:55:20.525+0800	INFO	service/article.go:138	req_id:4093e89d-162c-4f7c-a7aa-51eacf579097|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:55:24.037+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:55:24.037+0800	INFO	service/article.go:138	req_id:3a9ab58e-c498-4bd6-ba39-2f8587572f93|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:55:26.399+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:55:26.399+0800	INFO	service/article.go:138	req_id:2471a65c-9c2d-4cbd-adfa-dfdb891122ad|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:55:29.874+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:55:29.874+0800	INFO	service/article.go:138	req_id:2c3c2be5-ee65-4331-9ce8-5639d06b5529|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:55:32.715+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:55:32.724+0800	INFO	service/article.go:48	req_id:dbae5031-b3d6-4274-ba71-fd36ca3efd73|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730627709}
2024-11-03T17:55:37.569+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:55:37.569+0800	INFO	service/article.go:138	req_id:68f5c875-2570-4ed9-9f1c-e788cae052b5|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:55:40.568+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:55:40.568+0800	INFO	service/article.go:138	req_id:bb311c85-7212-413b-b275-3ee287b7f748|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:55:41.174+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:55:41.174+0800	INFO	service/article.go:138	req_id:62af89e9-74e0-47a8-ac2a-add410cb22a6|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:55:42.105+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:55:42.115+0800	INFO	service/article.go:48	req_id:82180a12-e1b4-4a8e-88b5-f73f366dcdd5|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730627709}
2024-11-03T17:56:44.003+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:56:44.011+0800	INFO	service/article.go:48	req_id:30c41c47-ff34-4552-a19b-c8ebc37f9f20|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730627709}
2024-11-03T17:56:50.268+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:56:50.269+0800	INFO	service/article.go:138	req_id:52ef6ee5-a967-4fc9-a4be-9f9790270f54|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:56:53.438+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:56:53.438+0800	INFO	service/article.go:138	req_id:ccb3a080-34c6-42b3-afb1-b44719a299a0|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:57:05.568+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:57:05.568+0800	INFO	service/article.go:138	req_id:414c345a-8244-4740-8a6c-b8b9996c4c9a|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:57:38.896+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:57:38.897+0800	INFO	service/article.go:138	req_id:23216cf1-2864-48dc-a38b-79d3cbd41279|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:58:14.271+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:58:14.271+0800	INFO	service/article.go:138	req_id:5e76a749-fdc0-4f44-9a39-3cf647db42eb|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:58:20.940+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:58:20.941+0800	INFO	service/article.go:138	req_id:cbb58897-d07e-4f27-9e61-6341c4e4cf92|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:58:23.137+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:58:23.137+0800	INFO	service/article.go:138	req_id:81552bb7-4805-489b-8be9-b4cf79aff130|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:58:24.305+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:58:24.305+0800	INFO	service/article.go:138	req_id:578cc56b-3d8d-4bff-b3fa-0e3173587624|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:58:25.275+0800	INFO	article/guest_view.go:40	view article req:&{9}

2024-11-03T17:58:25.284+0800	INFO	service/article.go:48	req_id:986b4088-e7d0-41e4-bcbc-77de56094e4a|view article info: &{ID:9 UserID:1 Title:手动阀手动阀手动阀手动阀手动阀手动阀 Brief:手动阀手动阀手动阀手动阀手动阀手动阀 Content:手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀手动阀 TopUrl: View:16 Status:1 CreateTime:1730618569 UpdateTime:1730627709}
2024-11-03T17:58:26.304+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:58:26.304+0800	INFO	service/article.go:138	req_id:5d05591e-304e-4137-9776-3fc2dc5efac2|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:58:57.503+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:58:57.503+0800	INFO	service/article.go:138	req_id:b647f4ec-9200-4bb6-b735-587a9d058c1e|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:58:57.893+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:58:57.894+0800	INFO	service/article.go:138	req_id:744aaf53-5056-4a53-9ecb-cbc12bec016c|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:58:58.225+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:58:58.225+0800	INFO	service/article.go:138	req_id:215327b6-5806-4a26-a98f-7c1caa79ba72|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:58:58.443+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:58:58.444+0800	INFO	service/article.go:138	req_id:d16ea86e-f996-4e4f-9284-6abb13dc8c44|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:58:58.661+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:58:58.662+0800	INFO	service/article.go:138	req_id:ce708145-d1e3-4ff8-8ca0-9366ad6d2c64|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:58:58.870+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:58:58.870+0800	INFO	service/article.go:138	req_id:85ccf904-86b2-4a58-baeb-d6697e9f8250|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:58:59.468+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:58:59.468+0800	INFO	service/article.go:138	req_id:bf477de4-44d3-4ecd-b45e-40855c357d6d|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:58:59.701+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:58:59.702+0800	INFO	service/article.go:138	req_id:9928b0dd-cabb-4791-9fa7-eccc6685cc5e|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:58:59.867+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:58:59.867+0800	INFO	service/article.go:138	req_id:7ccd68f9-7772-463a-963e-8bca93460f13|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:00.449+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:00.450+0800	INFO	service/article.go:138	req_id:b845ad93-fa92-4295-8563-559f48d6b6f1|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:01.041+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:01.041+0800	INFO	service/article.go:138	req_id:34c52af1-9a7f-440b-8f53-9593b110a387|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:01.199+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:01.199+0800	INFO	service/article.go:138	req_id:83c68d6f-87f4-443c-8ec1-f7ff15e392b6|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:01.378+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:01.378+0800	INFO	service/article.go:138	req_id:505cd247-7859-4f01-a9f6-ea6b956ddcf8|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:01.886+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:01.887+0800	INFO	service/article.go:138	req_id:dcb2f3c5-876e-44ba-bc21-e836fd1fd34a|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:02.805+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:02.805+0800	INFO	service/article.go:138	req_id:74fbac47-2cdf-4959-867b-f9137eea01f7|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:03.537+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:03.538+0800	INFO	service/article.go:138	req_id:daf2168d-0828-40f2-bfff-9b0d3a00478a|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:03.938+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:03.939+0800	INFO	service/article.go:138	req_id:01dd87ab-93b6-47fd-b52e-41820eab1a51|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:04.478+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:04.478+0800	INFO	service/article.go:138	req_id:57d93833-89ab-495e-935c-b0abd83175b4|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:04.938+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:04.938+0800	INFO	service/article.go:138	req_id:cae0a0dc-20a0-4caf-b706-545abe800907|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:05.215+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:05.215+0800	INFO	service/article.go:138	req_id:cf8d9c8c-ecee-41c0-b601-99379bbeb97b|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:05.459+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:05.460+0800	INFO	service/article.go:138	req_id:2d411dac-e013-4078-b75f-82fc8d95958e|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:05.698+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:05.698+0800	INFO	service/article.go:138	req_id:4e077003-ca86-4341-a82a-b2907e7ace39|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:05.911+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:05.911+0800	INFO	service/article.go:138	req_id:91319a1c-c415-4bd0-a6e1-6cb2db06328b|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:06.114+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:06.114+0800	INFO	service/article.go:138	req_id:975e411a-d7ae-413e-b8b6-5855c09d5f0c|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:06.858+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:06.858+0800	INFO	service/article.go:138	req_id:619240a2-0b8c-4ffa-8f11-8c6892de7213|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:07.623+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:07.623+0800	INFO	service/article.go:138	req_id:8ff1d217-f53f-4848-a7e1-8f71b25e3271|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:07.841+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:07.841+0800	INFO	service/article.go:138	req_id:f0781931-2e9d-4349-8c69-dcd956d4e078|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:08.034+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:08.035+0800	INFO	service/article.go:138	req_id:0753c4aa-1586-43a3-b82a-122e25edecf6|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:08.220+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:08.221+0800	INFO	service/article.go:138	req_id:43b60da4-6e17-456c-a434-40c2f94cb5f5|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:08.424+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:08.424+0800	INFO	service/article.go:138	req_id:b4df65bc-d356-44d8-82a8-4f39dcfd89cc|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:08.866+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:08.866+0800	INFO	service/article.go:138	req_id:900812d5-96e7-41ab-bfd0-d41f54531ae4|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:09.229+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:09.229+0800	INFO	service/article.go:138	req_id:fa9f16b8-7ceb-4fe1-92c0-e455774df175|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:09.744+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:09.744+0800	INFO	service/article.go:138	req_id:6351621a-8402-4619-920a-b27d44158e5f|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:10.196+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:10.196+0800	INFO	service/article.go:138	req_id:5026a007-763f-4ed3-add9-900bc4e8e20d|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:10.500+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:10.501+0800	INFO	service/article.go:138	req_id:1ed68c65-d979-4004-84de-26f4ffd45828|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:10.705+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:10.705+0800	INFO	service/article.go:138	req_id:132b1193-a6cc-4649-bcce-7cf5d501182e|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:11.308+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:11.308+0800	INFO	service/article.go:138	req_id:8c853f09-1e39-47be-9319-ece05bc51b26|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:12.056+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:12.057+0800	INFO	service/article.go:138	req_id:e7769e20-6504-4535-aa05-f6f792ddac4f|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:12.333+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:12.334+0800	INFO	service/article.go:138	req_id:4e53b32b-d651-4efe-9ba5-027f952a7ac1|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:13.038+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:13.038+0800	INFO	service/article.go:138	req_id:248efc8d-cdd0-492a-88c7-244291bcaa40|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:13.445+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:13.445+0800	INFO	service/article.go:138	req_id:e1195550-5811-41fc-bbba-39942393de2f|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:13.931+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:13.931+0800	INFO	service/article.go:138	req_id:b4f85de2-880b-44d4-a986-c54539c4982b|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:14.133+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:14.134+0800	INFO	service/article.go:138	req_id:9f7dcbb7-3a3a-4e23-82fa-6c9b0030310f|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:14.633+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:14.633+0800	INFO	service/article.go:138	req_id:e0c50cac-803b-4d52-b9ff-a2e0cba05d7c|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:15.137+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:15.137+0800	INFO	service/article.go:138	req_id:53cd814b-4072-4df0-a7e0-5f5f856f23a4|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:15.321+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:15.321+0800	INFO	service/article.go:138	req_id:56e39fd7-1792-4617-af95-2ea51ebe61a0|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:15.582+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:15.582+0800	INFO	service/article.go:138	req_id:5bcfcbae-00ee-45fe-b468-7de913f9b5ff|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:15.847+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  0  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:15.847+0800	INFO	service/article.go:138	req_id:e7f97f96-8c13-4582-8649-eb50ee354bf6|filter article info: &{IDs:[] Title: Status:0 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:16.139+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:16.140+0800	INFO	service/article.go:138	req_id:87febee2-e745-4b23-849d-9c0e0acb1494|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:16.336+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  2  0 0 0 0 0 1 10  0}}

2024-11-03T17:59:16.336+0800	INFO	service/article.go:138	req_id:da56d49a-e581-4d82-aac0-f07d3f1cb671|filter article info: &{IDs:[] Title: Status:2 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:10 SortField: Sort:0}
2024-11-03T17:59:36.284+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:36.285+0800	INFO	service/article.go:138	req_id:91ddd322-f45a-4220-ad08-6c75d92444bf|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:38.753+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:38.754+0800	INFO	service/article.go:138	req_id:9e1f43e1-9e84-49bd-a475-b4efa096049b|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:42.118+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:42.118+0800	INFO	service/article.go:138	req_id:a34e59ab-7c7a-4244-a3fb-8cdb7e31ec7a|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:42.545+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:42.547+0800	INFO	service/article.go:138	req_id:ff8490ed-01d8-446e-b192-93761c02cde1|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:42.932+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:42.933+0800	INFO	service/article.go:138	req_id:96866006-4944-48a7-8172-c765d8f0ca37|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:43.361+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:43.361+0800	INFO	service/article.go:138	req_id:26bfe204-e4c1-4882-be9a-c8044ae1895e|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:43.765+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:43.766+0800	INFO	service/article.go:138	req_id:41616e54-c26e-4175-94b2-160008c73c4f|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:44.091+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:44.092+0800	INFO	service/article.go:138	req_id:a2ca6128-3dec-4f7f-9aad-edc21d4898c0|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:44.336+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:44.336+0800	INFO	service/article.go:138	req_id:9695dd17-bb55-425d-b09a-d59a11f1e207|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:44.571+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:44.571+0800	INFO	service/article.go:138	req_id:3371a063-cd18-438b-bf78-11f9fea5d8dd|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:44.822+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:44.823+0800	INFO	service/article.go:138	req_id:3a5c323f-24e3-4e2c-a87c-9e158331f786|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:45.013+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:45.014+0800	INFO	service/article.go:138	req_id:89b6f0d2-518e-4eb4-809a-3f664544b13e|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:45.304+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:45.304+0800	INFO	service/article.go:138	req_id:1b688c4d-9555-4c87-83b3-38b2c3d18434|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:45.656+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:45.657+0800	INFO	service/article.go:138	req_id:768c8141-0dfc-48f5-8f21-c40148707e9d|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:46.273+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:46.274+0800	INFO	service/article.go:138	req_id:aaecb176-91d0-4976-b2e2-a5e5966139fe|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:47.415+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:47.417+0800	INFO	service/article.go:138	req_id:788abf91-687a-4fa0-8bb7-3adebd57f68a|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T17:59:47.969+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T17:59:47.970+0800	INFO	service/article.go:138	req_id:7552b121-76ab-491a-b18a-9dd221440486|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T17:59:48.180+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T17:59:48.181+0800	INFO	service/article.go:138	req_id:972d83e7-b0d3-4984-bf79-f745d431986c|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T18:02:18.828+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T18:02:18.828+0800	INFO	service/article.go:138	req_id:cecae846-c651-4267-bbc9-a525aabe2c77|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T18:02:19.287+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T18:02:19.288+0800	INFO	service/article.go:138	req_id:af66c603-545b-42e4-b055-b095bf417abe|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T18:02:19.979+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T18:02:19.980+0800	INFO	service/article.go:138	req_id:13a97e8d-b472-4617-9e63-775768435ebf|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
2024-11-03T18:02:20.363+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 20  0}}

2024-11-03T18:02:20.364+0800	INFO	service/article.go:138	req_id:e867fedb-f364-42f6-8400-70fa66e511b4|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:20 SortField: Sort:0}
2024-11-03T18:02:21.459+0800	INFO	article/guest_list.go:41	get article list req:&{{[]  1  0 0 0 0 0 1 3  0}}

2024-11-03T18:02:21.459+0800	INFO	service/article.go:138	req_id:5164f65d-24f2-4765-b213-0c941e6df50d|filter article info: &{IDs:[] Title: Status:1 Brief: View:0 CreateTimeStart:0 CreateTimeEnd:0 UpdateTimeStart:0 UpdateTimeEnd:0 Page:1 Size:3 SortField: Sort:0}
